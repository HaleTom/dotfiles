# COMMENTS ARE NOT PERMITTED AFTER CONFIG VALUES:  https://unix.stackexchange.com/q/487037/143394

# .inputrc starts in emacs mode by default

# Get default keymappings
# INPUTRC=~/dev/null bash -c 'bind -pm vi' | grep -vE '^#|: self-insert$' |sort > vi-command
# INPUTRC=~/dev/null bash -c 'bind -pm vi-insert' | grep -vE '^#|: self-insert$' |sort > vi-insert
# INPUTRC=~/dev/null bash -c 'bind -pm emacs' | grep -vE '^#|: (do-lowercase-version|self-insert)$' | sort | sed -r 's/(.*)/\1  # emacs default/'

# Only 4 lines are added by vi-insert:   comm -13  <(sort emacs) <(sort vi-insert)
# "\C-d": vi-eof-maybe
# "\C-n": menu-complete
# "\C-p": menu-complete-backward
# "\e": vi-movement-mode

# What to add to vi-insert to have the best of both worlds:
# comm -23  <(sort emacs) <(sort vi-insert) > insert-mode-emacs-additions

# The following symbolic character names are recognized:
# RUBOUT, DEL, ESC, LFD, NEWLINE, RET, RETURN, SPC, SPACE, and TAB.


#
# Variables
#
# See https://www.gnu.org/software/bash/manual/html_node/Readline-Init-File-Syntax.html#Readline-Init-File-Syntax

# Emacs defaults have the best starting set of commands
set editing-mode vi

set bell-style visible
set completion-ignore-case on
set keyseq-timeout 400
set blink-matching-paren on

# Insert paste as a string rather than possibly running it
set enable-bracketed-paste on

# Preserve cursor column position in history
set history-preserve-point on

# Set readline mode strings
# Colours: https://en.wikipedia.org/wiki/ANSI_escape_code#CSI_codes
set show-mode-in-prompt on

# Mode strings:
# emacs: Green '@'
set emacs-mode-string  "\1\e[0;1;32m\2@\1\e[0m\2"
# vi command: Red ':'
set vi-cmd-mode-string "\1\e[0;1;31m\2:\1\e[0m\2"
# vi insert: White ' '
set vi-ins-mode-string "\1\e[0;1;37m\2>\1\e[0m\2"

# Cursors: https://askubuntu.com/a/620306/478705
# Cursors disabled for Octave and text terminals:
# set emacs-mode-string  "\1\e[0;1;32m\2@\1\e[0m\e[4 q\2" # green '@' underscore cursor
# set vi-cmd-mode-string "\1\e[0;1;31m\2:\1\e[0m\e[2 q\2" # red ':', block cursor
# set vi-ins-mode-string "\1\e[0;1;37m\2 \1\e[0m\e[6 q\2" # blue ' ', steady I-beam cursor


# The length in characters of the common prefix of a list of possible
# completions that is displayed without modification. When set to a value
# greater than zero, common prefixes longer than this value are replaced with an
# ellipsis when displaying possible completions.
set completion-prefix-display-length 8

# Treat hyphens (‘-’) and underscores (‘_’) as equivalent in matching
set completion-map-case on

# If set to On, when listing completions, readline displays the common prefix
# of the set of possible completions using a different color.  The color
# definitions are taken from the value of the LS_COLORS environment variable.
set colored-completion-prefix on

# Displays completions using colors indicating file type.
# Definitions taken from the value of the LS_COLORS environment
set colored-stats on

# Make Tab autocomplete regardless of filename case
set completion-ignore-case on

# List all matches in case multiple possible completions are possible
set show-all-if-ambiguous on

# Immediately add a trailing slash when autocompleting symlinks to directories
# Turned off as it hides information
# set mark-symlinked-directories on

# Show all autocomplete results at once
set page-completions off

# If there are more than X possible completions for a word, ask to show them all
set completion-query-items 100

# Show extra file information when completing, like `ls -F / --classify` does
set visible-stats on

# Be more intelligent when autocompleting by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
# Readline used by Bash 4.)
set skip-completed-text on

# Allow UTF-8 input and output, instead of showing stuff like $'\0123\0456'
set input-meta on
set output-meta on

# Allow iso-latin1 characters to be inserted rather
# than converted to prefix-meta sequences
set convert-meta off

# To allow the use of 8bit-characters like the german umlauts, uncomment
# the line below. However this makes the meta key not work as a meta key,
# which is annoying to those which don't need to type in 8-bit characters.

# set convert-meta off

# try to enable the application keypad when it is called.  Some systems
# need this to enable the arrow keys.
# set enable-keypad on

# see /usr/share/doc/bash/inputrc.arrows for other codes of arrow keys


# No quotes needed if it's a single keystroke:
# Control-u: universal-argument
# Meta-Rubout: backward-kill-word

# allow the use of the Home/End keys
"\e[1~": beginning-of-line
"\e[4~": end-of-line

# allow the use of the Delete/Insert keys
"\e[3~": delete-char
"\e[2~": quoted-insert

# mappings for "page up" and "page down" to step to the beginning/end
# of the history
# "\e[5~": beginning-of-history
# "\e[6~": end-of-history

# alternate mappings for "page up" and "page down" to search the history
# "\e[5~": history-search-backward
# "\e[6~": history-search-forward

# mappings for Ctrl-left-arrow and Ctrl-right-arrow for word moving
"\e[1;5C": forward-word
"\e[1;5D": backward-word
"\e[5C": forward-word
"\e[5D": backward-word
"\e\e[C": forward-word
"\e\e[D": backward-word


# Flip through autocompletion matches with Shift-Tab.
"\e[Z": menu-complete

# Filtered history search
"\e[A": history-search-backward
"\e[B": history-search-forward

# on menu-complete, first display the common prefix, then cycle through the 
# options when hitting TAB
# menu-complete-display-prefix off

######################################################################
# EMACS mode
######################################################################
set keymap emacs
# This the default binding for emacs mode
"\C-x\C-r": re-read-init-file

# switch to block cursor before executing a command
RETURN: "\e\n"

# Executing vi-movement-mode doesn't change the prompt prefix. See:
# http://unix.stackexchange.com/questions/303637/readline-how-do-i-change-from-emacs-to-vi-command-with-a-binding
# http://unix.stackexchange.com/questions/303631/how-can-i-setup-a-hybrid-readline-with-emacs-insert-mode-and-vi-command-mode/303632#303632
"\ee": vi-editing-mode
# swap to vi-insert mode, then run "jk" in that context
"jk": "\eejk"
"kj": "\eejk"
# needs to be below "kj" mapping
"\e": "kj"

# There are only 4 bindings unique to vi-insert mode, which can be easily added to emacs mode:
# "\C-d": vi-eof-maybe
# "\C-n": menu-complete
# "\C-p": menu-complete-backward
# However note that the following are the default emacs bindings:
# "\C-d": delete-char
# "\C-n": next-history
# "\C-p": previous-history
# I resolve these thus:
set keymap emacs
# eof-maybe: ^D does nothing if there is text on the line
"\C-d": delete-char
"\C-n": menu-complete
"\C-p": menu-complete-backward
# historY
"\C-y": previous-history
"\e\C-y": previous-history
# see http://unix.stackexchange.com/questions/303631/how-can-i-setup-a-hybrid-readline-with-emacs-insert-mode-and-vi-command-mode
"\e": "kj"

# Edit options before rerunning previous command, eg: ls a b c -> ls *-al a b c
# where * is cursor position in command mode
"\e-": "\C-ykj^W"

# upper case word before cursor
"\eu": "\e-1\eU"
# upper case word (default after cursor). alt-(number) for N words. Default is "\eu"
"\eU": upcase-word

# Ctl-][ for bigwords (whitespace separated)
"\e]": vi-forward-bigword
"\e[": vi-backward-bigword
# Meta-,. for words
"\e.": vi-forward-word
"\e,": vi-backward-word
# Meta->< for shell tokens eg "quoted strings"
"\e>": shell-forward-word
"\e<": shell-backward-word

# glob patterns without executing, eg: 'rm *x'
"\eg": glob-expand-word
"\eG": insert-completions

# This is actually the default anyway:
"\e\C-i": dynamic-complete-history

######################################################################
# vi COMMAND mode
######################################################################
set keymap vi-command
"\C-x\C-r": re-read-init-file
"z": emacs-editing-mode
"\ee": emacs-editing-mode

# go to the last command entered
"G": end-of-history
# go to the beginning of time
"gg": vi-fetch-history

# Easily bounce between tokens eg quoted strings
">": shell-forward-word
"<": shell-backward-word

# Map commands to the namespace "\e\C-x{command}": shell-forward-word
"\e\C-x{sfw}": shell-forward-word
"\e\C-x{sbw}": shell-backward-word
"\e\C-x{uarg}": universal-argument

# Go to the n-th shell-token argument
"\e1": "^\e\C-x{uarg}1\e\C-x{sfw}W"
"\e2": "^\e\C-x{uarg}2\e\C-x{sfw}W"
"\e3": "^\e\C-x{uarg}3\e\C-x{sfw}W"
"\e4": "^\e\C-x{uarg}4\e\C-x{sfw}W"
"\e5": "^\e\C-x{uarg}5\e\C-x{sfw}W"
"\e6": "^\e\C-x{uarg}6\e\C-x{sfw}W"
"\e7": "^\e\C-x{uarg}7\e\C-x{sfw}W"
"\e8": "^\e\C-x{uarg}8\e\C-x{sfw}W"
"\e9": "^\e\C-x{uarg}9\e\C-x{sfw}W"


######################################################################
# vi INSERT mode
######################################################################
set keymap vi-insert
# switch to block cursor before executing a command
RETURN: "\e\n"
"\ee": emacs-editing-mode
"jk": vi-movement-mode
"kj": vi-movement-mode
"\C-x\C-r": re-read-init-file

# Use emacs mode to add any other insert-mode bindings.

######################################################################
# Don't add user configuration below here
######################################################################
# Easier to add 'z' binding to vi-command to enter
# Here are the default bindings from emacs mode not in vi-insert
"\C-a": beginning-of-line
"\C-b": backward-char
"\C-]": character-search
"\C-d": delete-char
"\C-e": end-of-line
"\C-f": forward-char
"\C-g": abort
"\C-k": kill-line
"\C-l": clear-screen
"\C-n": next-history
"\C-o": operate-and-get-next
"\C-p": previous-history
"\C-q": quoted-insert
"\C-@": set-mark
"\C-_": undo
"\C-x\C-?": backward-kill-line
"\C-x\C-e": edit-and-execute-command
"\C-x\C-g": abort
"\C-x\C-r": re-read-init-file
"\C-x\C-u": undo
"\C-x\C-v": display-shell-version
"\C-x\C-x": exchange-point-and-mark
"\C-xe": call-last-kbd-macro
"\C-x)": end-kbd-macro
"\C-xg": glob-list-expansions
"\C-x*": glob-expand-word
"\C-x!": possible-command-completions
"\C-x/": possible-filename-completions
"\C-x@": possible-hostname-completions
"\C-x~": possible-username-completions
"\C-x$": possible-variable-completions
"\C-x(": start-kbd-macro
"\e0": digit-argument
"\e1": digit-argument
"\e2": digit-argument
"\e3": digit-argument
"\e4": digit-argument
"\e5": digit-argument
"\e6": digit-argument
"\e7": digit-argument
"\e8": digit-argument
"\e9": digit-argument
"\eb": backward-word
"\e<": beginning-of-history
"\e\C-?": backward-kill-word
"\ec": capitalize-word
"\e\C-]": character-search-backward
"\e\C-e": shell-expand-line
"\e\C-g": abort
"\e\C-h": backward-kill-word
"\e\C-i": dynamic-complete-history
"\e!": complete-command
"\e/": complete-filename
"\e@": complete-hostname
"\e{": complete-into-braces
"\e~": complete-username
"\e$": complete-variable
"\e\C-r": revert-line
"\e\C-y": yank-nth-arg
"\e\\": delete-horizontal-space
"\e-": digit-argument
"\ed": kill-word
"\e\e": complete
"\e>": end-of-history
"\ef": forward-word
"\eg": glob-complete-word
"\e^": history-expand-line
"\e#": insert-comment
"\e*": insert-completions
"\e_": insert-last-argument
"\e.": insert-last-argument
"\el": downcase-word
"\en": non-incremental-forward-search-history
"\ep": non-incremental-reverse-search-history
"\e=": possible-completions
"\e?": possible-completions
"\er": revert-line
"\e ": set-mark
"\e&": tilde-expand
"\et": transpose-words
"\eu": upcase-word
"\e_": yank-last-arg
"\e.": yank-last-arg
"\ey": yank-pop
######################################################################
# Don't add user configuration below here
######################################################################

######################################################################
# COMMENTS only below here
######################################################################

# "\C-A": beginning-of-line
# "\C-B": backward-char
# "\C-D": delete-char
# "\C-E": end-of-line
# "\C-F": forward-char
# "\C-K": kill-line
# "\C-L": clear-screen
# "\C-N": next-history
# "\C-P": previous-history
# "\C-O": operate-and-get-next
#
# # Enable Readline not waiting for additional input when a key is pressed.
# # Needed for the mappings below.
# set keyseq-timeout 0
#
# # `yank-last-arg` does not work exactly as in emacs mode
# "\e.": yank-last-arg
# "\e\177": backward-kill-word
# "\e0": digit-argument
# "\e1": digit-argument
# "\e2": digit-argument
# "\e3": digit-argument
# "\e4": digit-argument
# "\e5": digit-argument
# "\e6": digit-argument
# "\e7": digit-argument
# "\e8": digit-argument
# "\e9": digit-argument
# "\eb": backward-word
# "\ec": capitalize-word
# "\ed": kill-word
# "\ef": forward-word
# "\el": downcase-word
# "\en": non-incremental-forward-search-history
# "\ep": non-incremental-reverse-search-history
# "\et": transpose-words
# "\eu": upcase-word
# "\ey": yank-pop
#
# # some other useful mappings
#
# "\e/": complete-filename
# "\ek": kill-whole-line
# "\eo": "\C-v\C-j"
# # quickly switch to "normal" mode
# "\C-[": vi-movement-mode
# # perserve the currently editing line so that we can 
# # do something else before restoring it.
# "\eg": insert-comment
# "\er": "\C-R#\C-A\C-D\C-E"

# Insert the arguments from the last command after the present one with verification
# "p": "i !!*\r"
# TODO get current line, then paste it below
# "\C-p": 'i _cmd="!!" _opts="!!*" shopt -s histverify\r>/dev/null echo "$_cmd"\r PASTE ; shopt -u histverify\r'

# "p": "idate\015"
# The \r represents the enter key, but you can also use \C-m or \015 for the same result.
# ------------------------------------------------------------------------

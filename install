#!/bin/bash

set -eu # Die if command returns non-0 or unset variable is used

die() {
    echo "$*: $?"
    exit 1
}

# src_dir=$(dirname "$(readlink -f "$0")")
cd -P -- "$(dirname "$0")" || exit 1  # cd includes it's own fail message

echo Updating submodules...
git pull && git submodule update --init --recursive

echo Submodule status:
git submodule status --recursive

# Bootstrap stow by putting it config file in place

# Remove ~/.stow-global-ignore if it is a symlink
[[ -L $HOME/.stow-global-ignore ]] && rm "$HOME/.stow-global-ignore"
# Setup stow and then install the packages
ln -s ".dotfiles/misc/.stow-global-ignore" "$HOME" ||
  { echo "$0: Conflict with existing .stow-global-ignore. Exiting." >&2 ; exit 1; }

# Install packages
stow -v misc vim bash ruby tmux X11 gconf xdg git

# Install fzf if not installed:
if [[ ! -d "$XDG_DATA_HOME/fzf" ]]; then
  git clone --depth 1 https://github.com/junegunn/fzf.git "$XDG_DATA_HOME/fzf" && yes | "$XDG_DATA_HOME/fzf/install" --no-update-rc
  mv -i ~/.fzf.{bash,zsh} "$XDG_DATA_HOME/fzf/"
fi

mkdir -p $XDG_DATA_HOME/vim
mkdir -p $XDG_CACHE_HOME/vim


neobundle_dir="$XDG_DATA_HOME/vim/bundle/neobundle.vim"
git clone --depth 1 --shallow-submodules https://github.com/Shougo/neobundle.vim "$neobundle_dir"

# Parallel install/update of all vim bundles
# Install vimproc first to be able to do all the others in parallel
"$neobundle_dir"/bin/neoinstall vimproc
"$neobundle_dir"/bin/neoinstall # everything

echo
echo "YouCompleteMe vim plugin fetch and build:"
echo
echo '(cd $XDG_DATA_HOME/vim/bundle/YouCompleteMe &&'
echo 'git submodule update --init --recursive --depth 1 &&'
echo './install.py --clang-completer)'
echo

[include]
	# Put personal details (eg name, email) in another file
	# This file is excluded by .gitignore
  path = ~/.gitconfig.local

[core]
	editor = vim
	excludesfile = /home/ravi/.gitignore_global

	# convert newlines to system's standard on checkout,
	# and to LF when checking in
	# Eeek - causes addition of CR in linux
	# autocrlf = true

[alias]
	a      = add
	aa     = add -A
	aacm   = "!f() { git add -A && git commit -m \"$@\"; }; f"
	ai     = add --intent-to-add
	ap     = add --patch
	# Add all untracked files
	au     = "!f() { git ls-files -z -o --exclude-standard | xargs -0 git add; }; f"
	br     = branch
	c      = commit
	co     = checkout
	cob    = checkout -b
	# Create a branch tracking the same branch on origin.
	# '-' makes argument list start at $1
	cobt   = !sh -c 'git checkout -b "$1" && git branch --track origin/"$1"' -
	# Pick chunks to include of changed files, include all untracked files.
	ca     = commit -a -v
	caa    = "!f() { git add -A && git commit \"$@\"; }; f"
	caam   = "!f() { git add -A && git commit --message \"$@\"; }; f"
	caan   = "!f() { git add -A && git commit --amend --no-edit; }; f"
	cam    = commit -am  # note only changed files included
	can    = commit -a --amend
	canc   = commit -a --amend -C HEAD
	canm   = commit -a --amend -m
	cm     = commit -m
	cn     = commit --amend
	cnc    = commit --amend -C HEAD
	cnm    = commit --amend -m
	cp     = commit --patch
	cvp    = "!f() { git commit -v --patch \"$@\"; git st; }; f"
	# Select hunks from tracked files, then commit with all untracked files before commit
	cvpn   = "!f() { git commit -v --patch && \
		git ls-files -z -o --exclude-standard | xargs -0 git add && \
		echo '# Add only new files silently' > /dev/null && \
		git commit -a --amend --no-edit && \
		git status -s; }; f"
	dc     = diff --cached
	df     = diff --ws-error-highlight=old,new # old,new,context,all
	dh     = diff HEAD
	dhh    = diff HEAD~1
	ds     = diff --stat
	dt     = difftool -y -t vimdiff --noprompt
	logd   = log --oneline --graph --decorate --remotes --max-count=20
	logda  = log --oneline --graph --decorate --remotes --all --max-count=20
	logdaa = log --oneline --graph --decorate --remotes --all
	ls     = ls-files
	mum    = merge upstream/master
	psfwl  = push --force-with-lease
	psuo   = push --set-upstream origin
	psuob  = push --set-upstream origin `git rev-parse --abbrev-ref HEAD`
	pl     = pull
	ps     = push
	pum    = pull upstream master
	rb     = rebase
	rba    = rebase --abort
	rbc    = rebase --continue
	rbi    = rebase -i HEAD~20
	re     = reset
	res    = reset --soft
	reh    = reset HEAD
	rehh   = reset --hard HEAD
	rl     = reflog
	rmc    = rm --cached
	# sh    = "!f() { cd_git_root && exec \"$@\"; }; f"
	sh     = "!f() { root=$(pwd)/ && cd ${root%%/.git/*} && git rev-parse && exec \"$@\"; }; f"
	sh     = "!f() { exec \"$@\"; }; f"
	sm     = submodule
	ss     = stash
	st     = status --short # --branch

	# Show files ignored by git
	ign = ls-files -o -i --exclude-standard

	# Show files changed between the given commit and it's previous commit
	files = !sh -c 'git diff --name-status "$1"^ "$1"' -
	
	# Create complex function then run it
	# http://blogs.atlassian.com/2014/10/advanced-git-aliases/

	# Remove local branches that have already been merged
	# Target is master unless otherwise specified
	bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"

	# Simple diff ignoring line number changes
	sortdiff = !sh -c 'git diff "$@" | grep "^[+-]" | sort --key=1.2 | uniq -u -s1'
	
	editglobalconfig = "config -e --global"
	
[push]
	default = simple

[branch]
	# tell git-branch and git-checkout to setup new branches so that git-pull(1)
	# will appropriately merge from that remote branch.  Recommended.  Without this,
	# you will have to add --track to your branch command or manually merge remote
	# tracking branches with "fetch" and then "merge".
	autosetupmerge = true
	
[color]
	ui = auto
	[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[commit]
	verbose = true # include diff output
[diff]
	tool = vimdiff
[merge]
	tool = vimdiff
[difftool]
	prompt = false
[github]
	user = HaleTom

[include]
  # Put personal details (eg name, email) in another file
  # This file is excluded by .gitignore
  path = ~/.gitconfig.local

[core]
  editor = vim
  pager = less -FRX --tabs=4
  excludesfile = ~/.config/git/ignore

  # convert newlines to system's standard on checkout,
  # and to LF when checking in
  # Eeek - causes addition of CR in linux
  # autocrlf = true

# Alias syntax learnings:
# Double quotes around shell commands are not required
# If you want to \ continue a line, it must be inside a "-quoted string
# Continue/wrap long lines with final \ character
# It's not possible to have a comment after a continuation \
# Quote ALL newline, " and \ characters as \n, \" and \\
# A literal '#' or ';' must be inside "-quotes
; this is also a comment
[alias]
  a      = add
  aa     = add -A
  aacm   = "!f() { git add -A && git commit -m \"$@\"; }; f"
  an     = add --intent-to-add # add -N
  ap     = add --patch
  au     = "!git ls-files -z -o --exclude-standard | xargs -0 git add; #" # Add only untracked files
  aw     = !git diff -U0 -w --no-color -- \"$@\" | git apply --cached --ignore-whitespace --unidiff-zero "#" # Add only non-whitespace changes
  aow    = !git add -- \"$@\" && git diff --cached -w | git apply --cached -R "#" # Add only whitespace changes
  br     = branch
  brd    = branch -d
  brdd   = branch -D
  c      = commit
  co     = checkout
  cob    = checkout -b
  # Create a branch tracking the same branch on origin.
  # '-' makes argument list start at $1
  cobt   = !sh -c 'git checkout -b "$1" && git branch --track origin/"$1"' -
  # Pick chunks to include of changed files, include all untracked files.
  ca     = commit -a -v
  caa    = "!f() { git add -A && git commit \"$@\"; }; f"
  caam   = "!f() { git add -A && git commit --message \"$@\"; }; f"
  caan   = "!f() { git add -A && git commit --amend "\"$@\"; }; f"
  caanm   = "!f() { git add -A && git commit --amend -m "\"$@\"; }; f"
  caann  = "!f() { git add -A && git commit --amend --no-edit; }; f"
  cam    = commit -am  # note only changed files included
  can    = commit -a --amend
  cann   = commit -a --amend --no-edit
  canm   = commit -a --amend -m
  cl     = clone
  cls    = clone --depth 1 --shallow-submodules
  clear  = "!bash -c ' git clean -n | sed \"s/^Would remove //\"; \
    read -rn1 -p \"Delete all the above? [y/N] \" r; echo; \
    [[ x$r =~ ^x[yY] ]] && git clean -f || echo Untouched.'"
  cm     = commit -m
  cn     = commit --amend
  cnc    = commit --amend -C HEAD
  cnm    = commit --amend -m
  cp     = commit --patch
  cvp    = "!f() { git commit -v --patch \"$@\"; git st; }; f"
  # Select hunks from tracked files, then commit with all untracked files before commit
  cvpn   = "!f() { git commit -v --patch && \
    git ls-files -z -o --exclude-standard | xargs -0 git add && \
    echo '# Add only new files silently' > /dev/null && \
    git commit -a --amend --no-edit && \
    git status -s; }; f"
  db     = "!export GIT_TRACE=1; git" # Use to debug an alias, Eg: git db <aliasname>
  debug  = "!set -x; export GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2; git"
  dc     = diff --cached --ws-error-highlight=old,new # old,new,context,all
  df     = diff --ws-error-highlight=old,new
  dfc    = "!bash -c 'case \"$1\" in -*) ;; *) c=\"${1:-HEAD}\";shift; esac; git diff --ws-error-highlight=old,new \"$@\" \"$c\" \"`git child \"$c\"`\"' -" # Diff with first child
  dfp    = "!bash -c 'case \"$1\" in -*) ;; *) c=\"$1\";shift; esac; git diff --ws-error-highlight=old,new \"$@\" \"${c:=HEAD}~\" \"$c\"' -" # Diff with first parent
  dh     = diff --ws-error-highlight=old,new HEAD
  dhh    = diff --ws-error-highlight=old,new HEAD~1
  dch    = diff --cached --ws-error-highlight=old,new HEAD
  dchh   = diff --cached --ws-error-highlight=old,new HEAD~1
  ds     = diff --stat # lines added and removed
  dt     = difftool -y -t vimdiff --noprompt
  ec     = !"git edit-config"
  egc    = !"git edit-global-config"
  head   = "!c=\"`git rpc \"$1\"`\" && p=\"$(git log -n1 --oneline --decorate)\" && git update-ref --no-deref -m \"Move from $p\" HEAD \"$c\" #" # Move HEAD to specified commit-ish
  icdiff = difftool --no-prompt --extcmd icdiff # \"$@\"
  logd   = log --oneline --graph --decorate --remotes --max-count=20
  logda  = log --oneline --graph --decorate --remotes --all --max-count=20
  logdaa = log --oneline --graph --decorate --remotes --all
  ls     = ls-files
  mum    = merge upstream/master
  psfwl  = push --force-with-lease
  psuo   = push --set-upstream origin
  psuob  = "!b=\"$(git rev-parse --abbrev-ref HEAD)\" && git push --set-upstream origin \"$b\" #"
  pl     = pull
  plrb   = pull --rebase=true --autostash
  plrbi  = pull --rebase=interactive --autostash
  ps     = push
  pum    = pull upstream master
  rb     = rebase
  rba    = rebase --abort
  rbb    = !sh -c \"git rebase -i `git merge-base $1 HEAD` #\" # Rebase to branch-name # http://stackoverflow.com/a/31036518/5353461
  rbc    = rebase --continue
  rbi    = rebase --interactive --autostash --autosquash HEAD~20
  rbo    = rebase --onto
  re     = reset
  reh    = reset --hard
  res    = reset --soft
  resc   = !"git reset --soft `c=\\`git child\\`; [ \"$c\" ] && echo $c || git children`" # Move HEAD to the child
  resp   = reset --soft HEAD~ # Move HEAD to the first parent
  rl     = reflog
  rp     = rev-parse
  rpc    = !"git rev-parse --verify \"$1\"^{commit} #"
  rpt    = !"git rev-parse --verify \"$1\"^{tag} #"
  rmc    = rm --cached
  s      = status --short #--branch
  sm     = submodule
  sms    = submodule status
  sa     = stash apply
  sc     = stash clear # all
  sd     = stash drop # latest or specified
  sl     = stash list
  sp     = stash pop
  ss     = stash save
  ssa    = stash save --all
  ssu    = stash save --include-untracked
  si     = status --short --ignored
  t      = tag
  tl     = "!git tag -n1 --list | sort -V"
  tm     = tag -m
  td     = tag -d

  # Work through comments, then do *MORE* ruby :) 

  # Print the --decorations of `git log` without the ( ) eg "HEAD -> master, tag: head, origin/master"
  # TODO: for HEAD (or commit-ish if given)
  # With -n1, only last argument is used (strangely). Verify one argument is a commit-ish.
  decorations = "![ \"$#\" = 1 ] && git log -n1 --format=%D \"`git rev-parse --verify \"$1\"^{commit}`\" || echo \"Commit-ish not given\" >&2 #"

  # Print line like: d5439f7 (origin/install-maint, install-maint) INSTALL: Make `make` targets consistent across examples
  print-commit      = "!for c in \"$@\"; do git log -n1 --oneline --decorate \"$c\"; done #"
  print-commit      = "!for c in \"$@\"; do git log -n1 --format=\"%C(auto) %h %d %C(auto)%s %Cgreen%cd %Cblue%an\" --date=relative \"$c\"; done #"
  print-commit      = "!for c in \"$@\"; do shell-quote git log -n1 --format=\"%C(auto) %h %d %C(auto)%s %Cgreen%cd %Cblue%an\" --date=relative \"$c\"; done #"
  print-commit      = "!for c in \"$@\"; do shell-quote git log -n1 \"`git print-commit-format`\" --date=relative \"$c\"; done #"

  # Works
  print-commit      = "!for c in \"$@\"; do git log -n1 \"`git print-commit-format`\" --date=relative \"$c\"; done #"
  print-commit-format = "!echo --format=\"%C(auto) %h %d %C(auto)%s %Cgreen%cd %Cblue%an\""

  print-commit        = "!for c in \"$@\"; do f=`git print-commit-format` && eval git log -n1 $f \"$c\"; done #"
  print-commit-format = "!shell-quote -- --format=\"%C(auto)%h%d %C(auto)%s %Cgreen%cd %Cblue%an\" --date=relative"
  print-commit-long   = "!for c in \"$@\"; do f=`git print-commit-format` && eval git log -n1 $f --date=iso \"$c\"; done #"

  # TODO read shell-quote on arguments

  # print-commit      = "!for c in \"$@\"; do echo git log -n1 `git print-commit-format` \"$c\"; done #"
  # print-commit-format = "!shell-quote -- '--format=\"%C(auto) %h %d %C(auto)%s %Cgreen%cd %Cblue%an\"' --date=relative"
  # Print lines like: d5439f7 Tom Hale 2016-09-22 18:41:14 +0700 INSTALL: Make `make` targets consistent across examples (origin/install-maint, install-maint)
  # print-commit-long = "!for c in \"$@\"; do git log -n1 --format=\"%Cred%h %Creset%Cgreen%cN %Cblue%ci %Creset%s%d\" \"$c\"; done #"

  #
  # Children
  #
  # All children hashes of current (or specified) commit-ish sorted newest first
  children = "!git print-commit `git children-hash \"$1\"` #"
  # For all children, print: hash, author, date, subject and decorations
  children-long = "!git print-commit-long `git children-hash \"$1\"` #"
  children-hash = "!bash -c 'c=${1:-HEAD}; set -- $(git rev-list --all --not \"$c\"^@ --children | grep $(git rev-parse \"$c\") ); shift; echo $* | sed -r \"s/\\s+/\\n/g\" | tac' -"

  # TODO Above thoroughly teseted. Rename ancestry to prodgeny (sp)/descendants. Are the hashes the same? in ancestry and ancestry hash? Use log's child-b4-parent to get same output ordering?

  # Ancestry: Commits in $2's ancestry path back to $1, newest first. Includes $2, excludes $1. Newest first
  # Use 'HEAD' if $1 not given. Use last checked out branch if $2 not given
  # Newest first is required for --graph to do it's pretty thing
  ancestry = "!bash -c 'git log --graph --oneline --decorate --ancestry-path ${1:-HEAD}..${2:-\"$(git rev-parse @{-1})\"}' -"
  ancestry-long = "!git print-commit-long `git ancestry-hash \"$1\" \"$2\"` #"
  ancestry-hash = "!bash -c 'git log --format=%H --ancestry-path ${1:-HEAD}..${2:-\"$(git rev-parse @{-1})\"}' -"

  # Rename child-ancestors? child-begets /ot?

  # Direct-decendant commits of $1 which are also ancestors of $2, sorted newest first
  # Use 'HEAD' if $1 not given. Use last checked out branch if $2 not given
  children-branch = "!git print-commit `git children-branch \"$1\" \"$2\"` #" # Subshell unquoted to split output into arguments 
  children-branch-hash = "!bash -c 'c=$(git children \"$1\") && git ancestry \"$1\" | grep -xF \"$c\"' #"

  # TODO split into a function which announces if there is more than one child and whether the oldest is a branch-child
  # The newest child commit with descendant $2, else the newest child overall
  #FIXMEEEEE IFS:
  child-hash = "!c=\"`git ancestry-hash \"$1\" \"$2\" | tail -1`\" && if [ \"$c\" ]; then echo $c; ${IFS:#else} git children-hash \"$1\" | tail -1; echo no branch; fi #"
  child = "!git print-commit `git child-hash \"$1\" \"$2\"` #"


  # TODO:
  # Execute a fetch on all the remotes you have configured
  # fetchall = !bash -c 'source /etc/bash_completion.d/git && __git_remotes | xargs --no-run-if-empty -t -n1 git fetch $*' -

  # TODO: warn if more than one parent
  parent = rev-parse HEAD~

  # Generate fixup/squash for HEAD or specified commit
  fixup  = !"c=\"$1\"; shift; git commit -m \"fixup! $(git log -1 --format='%s' \"$c\")\" \"$@\" #"
  # TODO use -e only if no additional -m given
  squash = !"c=\"$1\"; shift; git commit -m \"squash! $(git log -1 --format='%s' \"$c\")\" \"$@\" -e #" # -e to add message to squash in

  # Run a command in the root of the working tree
  sh   = !bash -c '\"$@\"' - # default to bash
  bsh = !\"$@\" - # Bourne shell, save some typing in default case :)

  # Aliases
  la = !git config --list | grep ^alias\\. | cut -c 7- | grep -Ei --color \"$1\" "#" # List aliases
  # Quote / unquote a sh command, converting it to / from a git alias string
  quote-string = "!read -r l; printf \\\"!; printf %s \"$l\" | sed 's/\\([\\\"]\\)/\\\\\\1/g'; printf \" #\\\"\\n\" #"
  quote-string-undo = "!read -r l; printf %s \"$l\" | sed 's/\\\\\\([\\\"]\\)/\\1/g'; printf \"\\n\" #"

  # Show files ignored by git
  ign = ls-files -o -i --exclude-standard

  # Show files changed between the given commit and it's previous commit
  files = "![ x$# != x1 ]&&echo "commit-ish required" >&2 || git diff --name-status \"$1\"^ \"$1\" #"

  # Create complex function then run it
  # http://blogs.atlassian.com/2014/10/advanced-git-aliases/

  # Remove local branches that have already been merged
  # Target is master unless otherwise specified
  bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"

  # Simple diff ignoring line number changes
  sortdiff = !sh -c 'git diff "$@" | grep "^[+-]" | sort --key=1.2 | uniq -u -s1'

  # Edit this module's config file
  edit-config = !"$EDITOR \"`git rev-parse --git-dir`\"/config #"
  # Manage this config file
  edit-global-config = "!bash -c '[ -f ~/.gitconfig -a -f ~/.config/git/config ] && ! confirm_sure \"Two config files exist. Proceed?\" && exit || git config -e --global'"
  backup-config = "!c=~/.config/git/config;g=~/.gitconfig; [ -e \"$g\" -a x$1 != x-f ] && echo \"$g exists. Not modified\" || cp -vp \"$c\" \"$g\" #"
  rmbackup-config = "!rm -v ~/.gitconfig"

[push]
  default = simple

[branch]
  # tell git-branch and git-checkout to setup new branches so that git-pull(1)
  # will appropriately merge from that remote branch.  Recommended.  Without this,
  # you will have to add --track to your branch command or manually merge remote
  # tracking branches with "fetch" and then "merge".
  autosetupmerge = true
  
[color]
  ui = auto
  [color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
  [color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
  [color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22
  [color "status"]
    added = yellow
    changed = green
    untracked = cyan
[commit]
  verbose = true # include diff output for easy review
[rebase]
  stat = true

# Remove cachetextconv: git update-ref -d refs/notes/textconv/<driver>
[diff]
  tool = vimdiff
  # https://git-scm.com/docs/gitattributes
  [diff "strings"]
    # `strings -a` may cause null output - git won't print a header in that case
    textconv=strings -a
  [diff "hexdump"]
    textconv=hexdump -vC
  [diff "pdf"]
    textconv="pdfinfo \"$1\"; pdftotext \"$1\" - #"
  [diff "zip"]
    textconv=unzip -v
    cachetextconv = true
  [diff "exif"]
    textconv = exiftool # Many file formats. https://en.wikipedia.org/wiki/ExifTool
    cachetextconv = true
  [diff "ps"]
    textconv = ps2ascii
    binary=true # Mark as a binary even though they are meaningless text

[difftool]
  prompt = false
[merge]
  tool = vimdiff

[interactive]
  diffFilter = "diff-hi | less -FRX --tabs=4"

[pager]
  # Bypass pager: git --no-pager ...
  # " = true" means use pager defined in [core]
  # add      = true # disabled currently due to bug
  diff     = true
  difftool = true
  log      = true
  show     = true
  # Consider https://github.com/so-fancy/diff-so-fancy - removes +/- leaders
  # but ugly when less than one screen's worth of output - blank lines are all '~'

  # Allow hunk movement with n/p keys
  # diff = diff-hi | less -FRX --tabs=4 --pattern '^(\\@\\@.*,.*,.*\\@\\@|diff --git .* .*)$' # Allow hunk movement with n/p keys

[include]
  # Put personal details (eg name, email) in another file
  # This file is excluded by .gitignore
  path = ~/.config/git/config-ravi

[core]
  editor = nvim
  # pager = less -FLRX --tabs=4
  pager = "diff-so-fancy | less -FLRX --tabs=4"
  excludesFile = ~/.config/git/ignore

[mailmap]
  file = ~/.config/git/mailmap


  # convert newlines to system's standard on checkout,
  # and to LF when checking in
  # Eeek - causes addition of CR in linux
  # autocrlf = true

# Alias syntax learnings:
# Double quotes around shell commands are not required
# If you want to \ continue a line, it must be inside a "-quoted string
# Continue/wrap long lines with final \ character
# It's not possible to have a comment after a continuation \
# Quote ALL newline, " and \ characters as \n, \" and \\
# A literal '#' or ';' must be inside "-quotes
; this is also a comment

[alias]  # these are case INsensitive
  a      = add
  aa     = add -A
  aacm   = "!f() { git add -A && git commit -m \"$@\"; }; f"
  an     = add --intent-to-add # add -N
  ap     = add --patch
  au     = add --update
  aut    = "!git ls-files -z -o --exclude-standard | xargs -0 git add; #" # Add only untracked files
  aw     = !git diff -U0 -w --no-color -- \"$@\" | git apply --cached --ignore-whitespace --unidiff-zero "#" # Add only non-whitespace changes
  aow    = !git add -- \"$@\" && git diff --cached -w | git apply --cached -R "#" # Add only whitespace changes
  bi     = bisect
  bis    = bisect start
  bib    = bisect bad
  big    = bisect good
  bir    = bisect reset
  br     = branch
  brd    = branch -d
  brdd   = branch -D # Same as branch --force. Allow deletion if branch is not merged.
  brf    = branch -f
  brl    = branch --list
  brm    = branch --move # rename
  brt    = branch --track
  brsut  = branch --set-upstream-to
  c      = commit
  # Pick chunks to include of changed files, include all untracked files.
  ca     = commit -a -v
  caa    = "!f() { git add -A && git commit \"$@\"; }; f"
  caam   = "!f() { git add -A && git commit --message \"$@\"; }; f"
  caan   = "!f() { git add -A && git commit --amend "\"$@\"; }; f"
  caanm   = "!f() { git add -A && git commit --amend -m "\"$@\"; }; f"
  caann  = "!f() { git add -A && git commit --amend --no-edit; }; f"
  cam    = commit -am  # note only changed files included
  can    = commit -a --amend
  cann   = commit -a --amend --no-edit
  canm   = commit -a --amend -m
  cfu    = !"git commit --fixup=\"$1\" \"${@:2}\" #"
  ch     = cherry-pick
  cha    = cherry-pick --abort
  chc    = cherry-pick --continue
  cinit  = commit --allow-empty -m 'Initialise repository'
  cl     = clone
  cls    = clone --depth 5 --shallow-submodules
  clss   = "!git clone --depth 5 --shallow-submodules --single-branch --branch \"$@\" #  eg git clss maint git://github.com/user/repo"
  # Note git clean operates from the current directory, same behaviour:
  clear  = !"cd ${GIT_PREFIX:-.} && bash -c 'git clean -nd \"$@\" | sed \"s/^Would remove //\"; \
    read -rn1 -p \"Delete all the above? [y/N] \" r; echo; \
    [[ x$r =~ ^x[yY] ]] && git clean -df \"$@\" || echo Untouched.' removed \"$@\" #"
  cm     = commit -m
  cmf    = "! [ $# -ge 2 ] || { echo 'Give arguments: <commit msg> <files>' >&2; exit 1; }; git add \"${@:2}\" && git commit -m \"$@\" #"
  cn     = commit --amend
  cnn    = commit --amend --no-edit
  cnm    = commit --amend -m
  co     = checkout
  co-    = !"git checkout @{-1}; git print-commit-1 @ #"
  cob    = checkout -b
  cobb   = checkout -B
  cof    = checkout --force
  # Create a branch tracking the same branch on origin.
  # '-' makes argument list start at $1
  cobt   = !sh -c 'git checkout -b "$1" && git branch --track origin/"$1"' -
  cop    = checkout --patch
  cp     = commit --patch
  cvp    = "!f() { git commit -v --patch \"$@\"; git st; }; f"
  # Select hunks from tracked files, then commit with all untracked files before commit
  cvpn   = "!f() { git commit -v --patch && \
    git ls-files -z -o --exclude-standard | xargs -0 git add && \
    echo '# Add only new files silently' > /dev/null && \
    git commit -a --amend --no-edit && \
    git status -s; }; f"
  db     = "!export GIT_TRACE=1; git" # Use to debug an alias, Eg: git db <aliasname>
  debug  = "!set -x; export GIT_TRACE=2 GIT_CURL_VERBOSE=2 GIT_TRACE_PERFORMANCE=2 GIT_TRACE_PACK_ACCESS=2 GIT_TRACE_PACKET=2 GIT_TRACE_PACKFILE=2 GIT_TRACE_SETUP=2 GIT_TRACE_SHALLOW=2; git"
  dc     = diff --cached --ws-error-highlight=old,new # old,new,context,all
  df     = diff --ws-error-highlight=old,new
  # "diff -U" format, but colourised
  dfhi   = !"git -c core.pager='diff-highlight | less -FLRX --tabs=4' -c interactive.DiffFilter='diff-highlight | less -FLRX --tabs=4'"

## Fixme bash not needed, quoting problem when shown in g la
  dfc    = "!case \"$1\" in -*) ;; *) x=$(git rpc \"${1:-HEAD}\");shift; esac; git diff --ws-error-highlight=old,new \"$@\" \"$x\" \"$(git child-hash \"$x\")\" #" # Diff with first child
  dfp    = "!case \"$1\" in -*|'') ;; *) x=$(git rpc \"${1:-HEAD}\");shift; esac; git diff --ws-error-highlight=old,new \"$@\" \"${x:=HEAD}~\" \"$x\" #" # Diff with first parent
  dh     = diff --ws-error-highlight=old,new HEAD
  dhh    = diff --ws-error-highlight=old,new HEAD~1
  dch    = diff --cached --ws-error-highlight=old,new HEAD
  dchh   = diff --cached --ws-error-highlight=old,new HEAD~1
  ds     = diff --stat # lines added and removed
  dt     = difftool -y
  ec     = !"git status -sz  | sed -rnz 's/^(U.|.U) (.*)/\\2/p' | xargs -0 $EDITOR #"
  elc    = !"git edit-config"
  elx    = !"git edit-local-excludes"
  egc    = !"git edit-global-config"
  head   = !"c=$(git rpc \"$1\") && p=$(git log -n1 --oneline --decorate) && git update-ref --no-deref -m \"Move from $p\" HEAD \"$c\" #" # Move HEAD to specified commit-ish
  egx    = !"git edit-global-excludes"
  fu     = fixup
  fua    = fixup-auto
  head   = "!c=\"`git rpc \"$1\"`\" && p=\"$(git log -n1 --oneline --decorate)\" && git update-ref --no-deref -m \"Move from $p\" HEAD \"$c\" #" # Move HEAD to specified commit-ish
  icdiff = difftool --no-prompt --extcmd icdiff # \"$@\"
  lf     = log --pretty=full
  logd   = log --oneline --graph --decorate --remotes --max-count=20
  logd   = !"eval git log $(git fmt-commit-1line) --graph --remotes --max-count=20 #"
  logdi  = !"eval git log $(git fmt-commit-1line-iso) --graph --remotes --max-count=20 #"
  logda  = !"lines=$(($(tput lines)*3/5)); eval git log $(git fmt-commit-1line) --graph --all --remotes --color=always \"$@\" | head -n$lines #"
  logdai  = !"lines=$(($(tput lines)*3/5)); eval git log $(git fmt-commit-1line-iso) --graph --all --remotes --color=always \"$@\" | head -n$lines #"
  logdaa = !"eval git log $(git fmt-commit-1line) --graph --all --remotes --color=always \"$@\" #"
  logdaai= !"eval git log $(git fmt-commit-1line-iso) --graph --all --remotes --color=always \"$@\" #"
  ls     = ls-files
  mnf    = merge --no-ff
  mom    = merge origin/master
  mt     = mergetool -y
  mum    = merge upstream/master
  psf    = push --force-with-lease
  psuo   = push --set-upstream origin
  psuob  = "!b=\"$(git rev-parse --abbrev-ref HEAD)\" && git push --set-upstream origin \"$b\" #"
  pl     = pull
  plrf   = pull --rebase=false --autosquash --autostash
  plri   = pull --rebase=interactive --autosquash --autostash
  plrbm  = "!git pull --autostash && git rebase --autosquash --autostash \"${1:-master}\" \"${@:2}\" #"
  pp     = "!git pull && git push #"
  ps     = push
  prq    = !"hub pull-request \"$@\" #"
  pum    = pull upstream master
  rb     = rebase
  rba    = rebase --abort
  rbb    = !"git rebase -i $(git merge-base $1 HEAD) #" # Rebase to branch-name # http://stackoverflow.com/a/31036518/5353461
  rbc    = rebase --continue
## Fixme as shown by g la:
  rbi    = !"git rebase --interactive --autostash --autosquash \"$(git rpc \"${1:-HEAD~20}\")\"^ #"
  rbo    = rebase --onto
  ro     = remote
  rov    = remote --verbose
  re     = reset
  reco   = !"cd \"${GIT_PREFIX:-.}\" && git reset \"$@\" && git checkout \"$@\" #"  # https://stackoverflow.com/a/52313420/5353461
  recof   = !"cd \"${GIT_PREFIX:-.}\" && git reset -- \"$@\" && git checkout -- \"$@\" #"  # Use the current commit
  reh    = reset --hard
  rem    = reset --merge # Like hard but don't reset files that haven't been committed, failing if the target commit has changes in those files
  rep    = reset --patch
  res    = reset --soft
  # XXX test with $(:) resc
  resc   = !"git reset --soft $(c=$(git child); [ \"$c\" ] && echo $c || git children)" # Move HEAD to the child
  resp   = reset --soft HEAD~ # Move HEAD to the first Ancestor
  rl     = reflog
  rp     = rev-parse
  rpc    = !"git rev-parse --verify $(git rev-parse \"$1\")^{commit} #" # allow :/<regex> format
  rpt    = !"git rev-parse --verify $(git rev-parse \"$1\")^{tag} #" # allow :/<regex> format
  rr     = rerere
  rrd    = rerere diff
  rrr    = rerere remaining
  rrs    = rerere status
  rmc    = rm --cached
  s      = !"cd \"${GIT_PREFIX:-.}\" && git print-commit-1 HEAD; git status --short" # allow for git s .
  si     = !"git print-commit-1 HEAD; git status --short --ignored"
  sm     = submodule
  sms    = submodule status
  sa     = stash apply
  sai    = stash apply --index
  sb     = stash branch
  sc     = stash clear # all
  sd     = stash drop # latest or specified
  sl     = stash list
  sp     = stash pop
  spi    = stash pop --index
  sps    = stash push
  spsp   = stash push --patch
  ss     = stash save
  ssa    = stash save --all # includes ignored
  ssk    = stash save --keep-index # Changes to index are left intact
  ssp    = stash save --patch
  ssu    = stash save --include-untracked
  sska   = stash save --keep-index --all # includes ignored
  ssku   = stash save --keep-index --include-untracked
  sskua  = stash save --keep-index --include-untracked --all
  si     = status --short --ignored
  t      = tag
  tl     = "!git tag -n1 --list | sort -V"
  tm     = tag -m
  td     = tag -d

  # Top level directory of repository
  top       = !"git " # run command in repository top directory
  top-print = rev-parse --show-toplevel

  # Show changes in a file, following renames
  changes = log --follow --stat --patch

  #
  # Branches
  #
  branch-name = "symbolic-ref --short HEAD"  # https://stackoverflow.com/a/19585361/5353461
  # Pull a different branch without affecting the current one
  plbr = !"current=$(git symbolic-ref --short HEAD) && git stash save --all && git checkout \"${1:-master}\" && git pull && git checkout \"$current\" && git stash pop #"

  commit-undo = "!git reset @~ \"$(git branch-name)\" && git commit --amend --no-edit --allow-empty #"

  # Print only the first hash encountered
  grep-1hash = !"awk 'match($0, /[a-f0-9]{7,40}/) {print substr($0, RSTART, RLENGTH); exit}' #"
  # Print the first has on each line
  grep-hashes = !"sed -rn 's/(^|.*[^a-f0-9])([a-f0-9]{7,40})($|[^a-f0-9].*)/\\2/p' #"
  # Print all hashes encountered
  grep-hashes-all = !"c=$(grep -Eo '[a-f0-9]{7,40}' \"$@\") && echo \"$c\" || echo "Hash not found" >&2 #"

  # Print line(s) like:
  # 8d048fa (HEAD -> master) local-update: add cabal and npm 30 hours ago Tom Hale
  fmt-commit-1line = !"echo '--format=\"%C(auto)%h %s %d%C(auto,yellow)[%C(auto,nobold green)%cd%C(auto)%C(auto,bold blue) %aN%C(auto,nobold yellow)]%Creset\" --date=relative' #"
  fmt-commit-1line-iso = !"echo '--format=\"%C(auto)%h %s %d%C(auto,yellow)[%C(auto,nobold green)%cd%C(auto)%C(auto,bold blue) %aN%C(auto,nobold yellow)]%Creset\" --date=iso' #"
  print-commit-1 = !"for c in \"$@\"; do c=\"$(git rpc \"$c\")\" && eval \"git log -n1 $(git fmt-commit-1line) $c\"; done #"
  # Print line(s) like:
  # 8d048fa (HEAD -> master) local-update: add cabal and npm 2016-10-03 12:29:38 +0700 Tom Hale
  print-commit-1-long = !"for c in \"$@\"; do c=\"$(git rpc \"$c\")\" && eval \"git log -n1 $(git fmt-commit-1line) --date=iso $c\"; done #"

  # Print the --decorations of `git log` without the ( ) eg "HEAD -> master, tag: head, origin/master"
  # TODO: for HEAD (or commit-ish if given)
  # With -n1, only last argument is used (strangely). Verify one argument is a commit-ish.
  decorations = !"c=\"$(git rpc \"${1:-@}\")\" && git log -n1 --format=\"%C(auto)%D\" \"$c\" #"


  #
  # Children / Descendants (scions)
  #
  # All children hashes of current (or specified) commit-ish sorted newest first
  children-hash = !"c=\"$(git rpc \"${1:-@}\")\" && set -- $(git rev-list --all --not \"$c\"^@ --children | grep \"$c\"); shift; for c in $*; do echo $c; done | tac #"
  children = !"git print-commit-1 $(git children-hash \"$1\") #"
  children-long = !"git print-commit-1-long $(git children-hash \"$1\") #"

  # Scions (definition): A descendant, especially a first-generation descendant; a shoot or twig.
  # Descendant paths from $2 path back to $1
  # Newest first is required for --graph to do it's pretty thing
  # Includes $2, excludes $1
  # Use 'HEAD' if $1 not given. Use last checked out branch if $2 not given

  # scions = !"sh -c \"git log $(git fmt-commit-1line) --graph --ancestry-path ${1:-HEAD}..${2:-\\\"$(git rev-parse @{-1})\\\"}\" -"
  # scions-long = "!git print-commit-1-long $(git scions-hash \"$1\" \"$2\") #"

  # works at command prompt:
  # set master tip
  # eval git log $(git fmt-commit-1line) --graph --ancestry-path "$(git rpc "${1:-@}")".."$(git rev-parse "${2:-"@{-1}"}")"
  # try setting from to variables then using.
  # scions = !"eval git log $(git fmt-commit-1line) --graph --ancestry-path \"$(git rpc \"${1:-@}\")\"..\"$(git rev-parse \"${2:-\"@{-1}\"}\")\" #"
  #
  scions = !"eval git log $(git fmt-commit-1line) --graph --ancestry-path \"${1:-HEAD}\"..\"${2:-$(git rev-parse @{-1})}\" #"
  scions-long = !"eval git log $(git fmt-commit-1line) --date=iso --graph --ancestry-path \"${1:-HEAD}\"..\"${2:-$(git rev-parse @{-1})}\" #"

  scions-hash = !"git log --format=%H --ancestry-path \"${1:-HEAD}\"..\"${2:-$(git rev-parse @{-1})}\" #"
  scions-list = !"git print-commit-1 $(git scions-hash \"$1\" \"$2\") #"
  scions-list-long = !"git print-commit-1-long $(git scions-hash \"$1\" \"$2\") #"

  # ---------------- Good above here -------------------- #

  # TODO ask all diff colours see note++ 11
  #
  # TODO use select with fixup
  # IFS=$'\n' && select name in $(g logda --color=always); do echo $name; break; done


  # Direct-decendant commits of $1 which are also ancestors of $2, sorted newest first
  # Use 'HEAD' if $1 not given. Use last checked out branch if $2 not given
  children-branch = !"git print-commit-1 $(git children-branch \"$1\" \"$2\") #" # Subshell unquoted to split output into arguments 
  children-branch-hash = !"c=$(git children \"$1\") && git scions \"$1\" | grep -xF \"$c\" #"

  # TODO split into a function which announces if there is more than one child and whether the oldest is a branch-child
  # The newest child commit with descendant $2, else the newest child overall
  #FIXMEEEEE IFS:
  child-hash = !"c=$(git scions-hash \"$1\" \"$2\" | tail -1) && if [ \"$c\" ]; then echo $c; else git children-branch-hash \"$1\" | tail -1 || echo no branch; fi #"
  child = !"git print-commit-1 $(git child-hash \"$1\" \"$2\") #"


  # TODO:
  # Execute a fetch on all the remotes you have configured
  # fetchall = !bash -c 'source /etc/bash_completion.d/git && __git_remotes | xargs --no-run-if-empty -t -n1 git fetch $*' -

  # TODO: warn if more than one parent
  parent = rev-parse HEAD~

  # Generate fixup/squash for HEAD or specified commit
  fixup  = !"git commit -m \"fixup! $(git log -1 --format='%h %s' \"$(git rpc \"$1\")\")\" \"${@:2}\" #"

  # Automatically fix commit $1 based on index.  $2... are git commit options. # https://blog.filippo.io/git-fixup-amending-an-older-commit/
  fixup-auto = "!f() { commit=$(git rpc \"$1\") && git commit --fixup=\"$commit\" \"${@:2}\" && GIT_SEQUENCE_EDITOR=true git rbi \"$commit\"; }; f"

  #
  # Boolean tests
  #

  # Return true if index AND working directory are clean
  status-clean = !"[ -z \"$(git status --porcelain)\" ] #"
  status-clean-ignore-untracked = !"[ -z \"$(git status -uno --porcelain)\" ] #"

  is-branch = !"git show-ref -q --verify refs/heads/\"$1\" #"
  is-tag    = !"git show-ref -q --verify refs/tags/\"$1\" #"
  is-remote = !"git show-ref -q --verify refs/remotes/\"$1\" #"

  # ---------------

  # TODO use -e only if no additional -m given
  squash = !"c=\"$1\"; shift; git commit -m \"squash! $(git log -1 --format='%s' \"$c\")\" \"$@\" -e #" # -e to add message to squash in

  # Run a command in the root of the working tree
  sh   = !bash -c '\"$@\"' - # default to bash
  bsh = !\"$@\" - # BOURNE shell, save some typing in default case :)

  # Aliases
  la = !git config --list | grep ^alias\\. | cut -c 7- | grep -Ei --color -e \"$@\" "#" # List aliases
  # Quote / unquote a sh command, converting it to / from a git alias string
  quote-string = !"read -r l; printf !\\\"; printf %s \"$l\" | sed 's/\\([\\\"]\\)/\\\\\\1/g'; printf \" #\\\"\\n\" #"
  quote-string-undo = !"read -r l; printf %s \"$l\" | sed 's/\\\\\\([\\\"]\\)/\\1/g'; printf \"\\n\" #"

  # Show files ignored by git
  ign = ls-files -o -i --exclude-standard

  # The files changed between commit $2 and $1
  # Use HEAD if $1 not given and (first parent of $1) if $2 not given
  files = !"new=\"$(git rpc \"${1:-@}\")\" && old=\"$(git rpc \"${2:-\"$new~\"}\")\" && git diff --name-status \"$old\" \"$new\" #"

  # Create complex function then run it
  # http://blogs.atlassian.com/2014/10/advanced-git-aliases/

  # Remove local branches that have already been merged
  # Target is master unless otherwise specified
  bclean = "!git branch --merged ${1-master} | grep -v \" ${1-master}$\" | xargs -r git branch -d #"

  # Simple diff ignoring line number changes
  sortdiff = !"git diff \"$@\" | grep \"^[+-]\" | sort --key=1.2 | uniq -u -s1 #"

  # Edit this module's config file
  edit-config = !"$EDITOR $(git rev-parse --git-dir)/config #"

  # Manage this config file
  edit-global-config = "![ -f ~/.gitconfig -a -f ~/.config/git/config ] && ! confirm \"Two config files exist. Proceed?\" && exit || git config -e --global #"
  backup-config = "!c=~/.config/git/config;g=~/.gitconfig; [ -e \"$g\" -a x$1 != x-f ] && echo \"$g exists. Not modified\" || cp -vp \"$c\" \"$g\" #"
  rmbackup-config = "!rm -v ~/.gitconfig"

  # Edit excludes files
  edit-global-excludes = !"bash -c 'f=$(git config core.excludesFile); \"$EDITOR\" \"${f/#\\~/$HOME}\"' #"
  edit-local-excludes = !"\"$EDITOR\" \"$(git rev-parse --show-toplevel)/.gitignore\" #"

[branch]
  # tell git-branch and git-checkout to setup new branches so that git-pull(1)
  # will appropriately merge from that remote branch.  Recommended.  Without this,
  # you will have to add --track to your branch command or manually merge remote
  # tracking branches with "fetch" and then "merge".
  autosetupmerge = true

[color]
# Colours: black, red, green, yellow, blue, magenta, cyan, white, reset
# After the foreground color, you can optionally list a background color
# Modifiers: bold dim italic ul blink reverse strike.
# Also: 24-bit colours: #ff69b4; Disable modifier: no-<modifier>
# Get complete list of variables: https://stackoverflow.com/q/47176670/5353461
# http://shallowsky.com/blog/programming/gitcolors.html
  ui = auto
  [color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
    upstream = cyan
    plain = white
  [color "diff"]
    commit = yellow
    context = normal
    frag = yellow bold
    func = white bold
    meta = yellow bold
    new = green bold
    old = red bold
    whitespace = red reverse
    # Zebra pair #1
    oldMoved = blue dim strike
    newMovedAlternative = blue italic
    # Zebra pair #2
    newMoved = cyan dim strike
    oldMovedAlternative = cyan strike
    # Dimmed pair #1
    oldMovedDimmed = dim blue strike
    newMovedAlternativeDimmed = blue italic
    # Dimmed pair #2
    oldMovedAlternativeDimmed = dim cyan strike
    newMovedDimmed = cyan italic

  [color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22
  [color "grep"]
    context = normal
    filename = normal
    function = normal
    linenumber= normal
    match = yellow bold
    matchContext = normal
    matchSelected = normal
    selected = normal
    separator = normal
  [color "interactive"]
    prompt = yellow bold
    header = magenta
    help = green
    error = red bold
  [color "status"]
    added = yellow
    changed = red
    header = normal
    nobranch = red bold
    untracked = cyan
    updated = green

[commit]
  verbose = true # include diff output for easy review

[diff]
  # https://git-scm.com/docs/git-diff
  algorithm = patience # Take longer for a smaller diff
  # colorMoved = zebra
  colorMoved = dimmed_zebra
  indentHeuristic = true # New default from v2.14, see https://github.com/blog/2188-git-2-9-has-been-released
  interHunkContext = 2
  renames = copies
  tool = vimdiff

  # https://git-scm.com/docs/gitattributes
  # Remove cachetextconv via : git update-ref -d refs/notes/textconv/<driver>
  [diff "strings"]
    # `strings -a` may cause null output - git won't print a header in that case
    textconv=strings -a
  [diff "hexdump"]
    textconv=hexdump -vC
  [diff "pdf"]
    textconv="pdfinfo \"$1\"; pdftotext \"$1\" - #"
  [diff "zip"]
    textconv=unzip -v
    cachetextconv = true
  [diff "exif"]
    textconv = exiftool # Many file formats. https://en.wikipedia.org/wiki/ExifTool
    cachetextconv = true
  [diff "ps"]
    textconv = ps2ascii
    binary=true # Mark as a binary even though they are meaningless text
  [diff "jupyternotebook"]
    command = git-nbdiffdriver diff

[difftool]
  prompt = true # Use alias for no-prompt
  trustExitCode = true # true by default, :cq in vim to exit non-zero
  [difftool "nbdime"]
    cmd = git-nbdifftool diff \"$LOCAL\" \"$REMOTE\" \"$BASE\"

[interactive]
  # diff-so-fancy not working with --patch:
  # https://github.com/so-fancy/diff-so-fancy/issues/35
  # https://github.com/so-fancy/diff-so-fancy/pull/172
  # https://github.com/so-fancy/diff-so-fancy/issues/296
  #
  # diffFilter = "diff-so-fancy | less -FLRX --tabs=4" # My original
  # diffFilter = "diff-so-fancy --patch-mode| less -FLRX --tabs=4" # Suggested by above issue

  # The default seems to be "diff-highlight"
  diffFilter = "diff-hi | less -FLRX --tabs=4"

[log]
  mailmap = true

[merge]
  conflictStyle = diff3 # include original lines
  tool = vimdiff
  stat = true # show what changed
  [merge "jupyternotebook"]
    driver = git-nbmergedriver merge %O %A %B %L %P
    name = jupyter notebook merge driver

[mergetool]
  prompt = true # Use alias for no-prompt
  [mergetool "nbdime"]
    cmd = git-nbmergetool merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"

[mergetool "vimdiff"]
  trustExitCode = true # true by default, :cq in vim to exit non-zero

[pager]
  # Bypass pager: git --no-pager ...
  # "X = true" means use pager defined in [core]
  # add      = /usr/bin/less -FLRX --tabs=4
  # add      = true # disabled currently due to bug - doesn't prompt with git add --patch # TODO raise issue
  # diff     = "diff-hi | less -FLRX --tabs=4"
  # diff     = "diff-so-fancy | less -FLRX --tabs=4"
  diff     = true
  difftool = true
  log      = true
  show     = true
  # Consider https://github.com/so-fancy/diff-so-fancy - removes +/- leaders
  # but ugly when less than one screen's worth of output - blank lines are all '~'

  # Allow hunk movement with n/p keys
  # diff = diff-hi | less -FLRX --tabs=4 --pattern '^(\\@\\@.*,.*,.*\\@\\@|diff --git .* .*)$' # Allow hunk movement with n/p keys

[pull]
  rebase = true

[push]
  default = simple

[rebase]
  autosquash = true
  autostash = true
  missingCommitsCheck = warn # Protect against accidentally removed lines
  stat = true # show what changed

[rerere] # .git/rr-cache
  enabled = true
  autoupdate = true # auto-stage resolved conflicts

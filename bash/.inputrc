# We start off in emacs mode by default
"\C-x\C-r": re-read-init-file

set editing-mode vi
set keymap vi-command

set bell-style visible

set show-mode-in-prompt on

$if mode=vi
    set keymap vi-command
    "gg": beginning-of-history
    "G": end-of-history
    " i": vi-insertion-mode
		"\C-x\C-r": re-read-init-file
    set keymap vi-insert
    "jk": vi-movement-mode
    "kj": vi-movement-mode
    "\C-w": backward-kill-word
    "\C-p": history-search-backward
$endif

# Make Tab autocomplete regardless of filename case
set completion-ignore-case on

# List all matches in case multiple possible completions are possible
set show-all-if-ambiguous on

# Immediately add a trailing slash when autocompleting symlinks to directories
set mark-symlinked-directories on

# Show all autocomplete results at once
set page-completions off

# If there are more than 200 possible completions for a word, ask to show them all
set completion-query-items 200

# Show extra file information when completing, like `ls -F` does
set visible-stats on

# Be more intelligent when autocompleting by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla". (This is supported by the
# Readline used by Bash 4.)
set skip-completed-text on

# Allow UTF-8 input and output, instead of showing stuff like $'\0123\0456'
set input-meta on
set output-meta on

# Allow iso-latin1 characters to be inserted rather
# than converted to prefix-meta sequences
set convert-meta off

# Flip through autocompletion matches with Shift-Tab.
"\e[Z": menu-complete

# Filtered history search
"\e[A": history-search-backward
"\e[B": history-search-forward

# on menu-complete, first display the common prefix, then cycle through the 
# options when hitting TAB
# menu-complete-display-prefix off

###########################################################
# Keymaps for when we're in command mode (e.g., after hitting ESC)
set keymap vi-command

"\C-x\C-r": re-read-init-file

$if bash
	# Edit options before rerunning previous command, eg: ls a b c -> ls *-al a b c
	# where * is cursor position in command mode
	"\e-": "\C-p\e^W"
$endif


# Insert the arguments from the last command after the present one with verification
# "p": "i !!*\r"
# TODO get current line, then paste it below
# "\C-p": 'i _cmd="!!" _opts="!!*" shopt -s histverify\r>/dev/null echo "$_cmd"\r PASTE ; shopt -u histverify\r'

# The \r represents the enter key, but you can also use \C-m or \015 for the same result.
# "p": "idate\015"

# ------------------------------------------------------------------------
# From: http://vim.wikia.com/wiki/Use_vi_shortcuts_in_terminal
# ------------------------------------------------------------------------
# When hitting option-up/option-down, cycle through the previous commands
# which start with the prefix you've entered, rather than just cycling through
# the last entered commands.
# In OS X's Terminal.app preferences, I have 'Use option as meta key' off, and
# have mapped "option cursor up" to "\033\033[A" and "option cursor down" to 
# "\033\033[B".
# Feel free to bind to whatever you want. Delete the first '\e' in the keymap
# to set plain up/down to do a history search by default.
"\e\e[A": history-search-backward
"\e\e[B": history-search-forward

###########################################################
# Keymaps for when we're in insert (i.e., typing stuff in) mode
set keymap vi-insert
"\C-x\C-r": re-read-init-file

# Option-up/option-down should also apply to insert mode
"\e\e[A": history-search-backward
"\e\e[B": history-search-forward

# Needed because binding 'p' in command mode above wipes its insert mode
# function, too. This fixes that, and will insert 'p' when you type 'p'.
# "p": self-insert

# ------------------------------------------------------------------------

$if bash
	# Edit options before rerunning previous command, eg: ls a b c -> ls *-al a b c
	# where * is cursor position in command mode
	"\e-": "\C-p\e^W"
$endif

# glob patterns without executing, eg: 'rm *x'
"\ee": glob-expand-word

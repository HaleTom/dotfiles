#!/bin/bash
# shellcheck disable=SC1090
# Above two lines are for shellcheck's happiness:
# #1) Determine shell. #2) Silence when trying to source a filename in a variable
#
# Allow shell-specific code
function sh_is_zsh { [[ -n $ZSH_VERSION ]]; }
function sh_is_bash { [[ -n $BASH_VERSION ]]; }

# Enable extended globbing:
# https://www.gnu.org/software/bash/manual/bash.html#Pattern-Matching
# https://unix.stackexchange.com/questions/276911/is-it-dangerous-to-always-have-extglob-on
sh_is_bash && shopt -s extglob failglob

# Setup $XDG* variables
source "$HOME/.config/bash/xdg"

# Standard-ish programs
export BROWSER=/usr/bin/google-chrome-stable
export EDITOR=nvim
export MANPAGER='less -Ms +Gg' # Show line percentage in man pages

export RUBYLIB="$HOME"/lib:"$RUBYLIB"
export GNULIB_SRCDIR="$HOME"/repo/gnulib
export GCC_COLORS=1 # Enable gcc colours, available since gcc 4.9.0
export RSYNC_PARTIAL_DIR=.rsync-tmp-partial # Automatically set --partial-dir with --partial
export GOPATH="$XDG_DATA_HOME/go"

# Have less display colours
# from: https://wiki.archlinux.org/index.php/Color_output_in_console#man
export LESS_TERMCAP_mb=$'\e[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\e[1;33m'     # begin blink
export LESS_TERMCAP_so=$'\e[01;44;37m' # begin reverse video
export LESS_TERMCAP_us=$'\e[01;37m'    # begin underline
export LESS_TERMCAP_me=$'\e[0m'        # reset bold/blink
export LESS_TERMCAP_se=$'\e[0m'        # reset reverse video
export LESS_TERMCAP_ue=$'\e[0m'        # reset underline
export LESS='-FJMRWXis -x4 -z-4'
# F = exit if all can be displayed on first creen
# J = status column
# M = show line numbers and percentage if known
# R = interpret ANSI colour codes
# W = highlight first unread line (see -z)
# X = don't send termcap initialization and deinitialization strings (eg clear)
# i = smartcase searching
# m = show :w
# s = squash multiple blank lines into one
# u = send backspaces and carriage returns directly to the terminal (breaks colored man)
# x = Convert tabs to <arg> spaces
# z = sets window to n lines less than current terminal given '-n'

# Have groff emit ANSI codes instead of overstrike
# https://lists.archlinux.org/pipermail/arch-dev-public/2009-February/010411.html
# export GROFF_SGR=1

# Have less highlight source code
LESSOPEN="|-$HOME/bin/highlight-less-wrapper"' "%s"'  # shellcheck disable=SC2034

# Set $LS_COLORS
[ -x /usr/bin/dircolors ] && eval "$(/usr/bin/dircolors)"

# Colour iostat when on a terminal. This should be default, but needed to be set at 2018-05-21.
export S_COLORS=auto

# Use powerpill as pacman wrapper if installed
[[ -x /usr/bin/powerpill ]] && export PACMAN=/usr/bin/powerpill

# Have command-not-found ask to install
export COMMAND_NOT_FOUND_INSTALL_PROMPT=1

# ssh-ident
export BINARY_SSH=/usr/bin/ssh
export BINARY_SCP=/usr/bin/scp

# Python
export PYTHONUSERBASE=$XDG_DATA_HOME/python
# Python virtualenvwrapper
export WORKON_HOME=$XDG_DATA_HOME/virtualenvs
export VIRTUALENVWRAPPER_PYTHON=$WORKON_HOME/default/bin/python
export PROJECT_HOME=$HOME/prj # Used by mkproject


# Bash only
if sh_is_bash; then
    export HISTFILE="$XDG_DATA_HOME"/bash/history
    # Exclude duplicates and commands starting with a <space> from history
    export HISTCONTROL=ignorespace:ignoredups
elif sh_is_zsh; then
    export HISTFILE="$XDG_DATA_HOME"/zsh/history
fi

# Zsh only
sh_is_zsh && export HISTFILE="$XDG_DATA_HOME"/zsh/history

# shopt -s histverify # Show output of !! - press enter twice

# Update "tmuxinator.{z,ba}sh" symlink if needed
if { [[ -x $(which tmuxinator) && -x $(which gem) ]] 2>/dev/null; }; then
  tmuxinator_source="$XDG_CONFIG_HOME/tmuxinator/tmuxinator.$(sh_is_zsh && printf zsh || printf bash)"
  # If not a regular file or symlink to one
  if [[ ! -f $tmuxinator_source ]]; then
      # If doesn't exist or already a symlink
      if [[ ! -e $tmuxinator_source || -L $tmuxinator_source ]]; then
          echo "Creating ${tmuxinator_source##*/} symlink:"
          tmp=$(gem which tmuxinator) && # tmuxinator executable
              tmp=$(readlink -f "${tmp%/*}/../completion") && # completion scripts dir
              ln -fsv "$tmp/${tmuxinator_source##*/}" "$tmuxinator_source"
          unset tmp
      else
        echo "Not creating symlink at at existing:"
        ls -lF "$tmuxinator_source"
      fi
  fi
fi

# Source files given as arguments
function _source_file {
    file=$1
    if [[ -f $file ]]; then
        source "$file"
    else
        # [ shell_is_zsh ] && echo "${(%):-%x line %i}: Cannot source $dotfile";
        # [ shell_is_zsh ] && echo "${(%):-%N}: Cannot source $dotfile";
        [[ -n $BASH_VERSION ]] && echo "${FUNCNAME[0]}@$LINENO: Cannot source $file";
        # This is also sourced by zsh...
        # shellcheck disable=SC2154
        [[ -n $ZSH_VERSION ]] && echo "$funcstack[1]@${(%):-%i}: Cannot source $file";
        return 1
    fi
}

# Source .dotfiles listed on STDIN (one per line)
function _source_files {
    while read -r dotfile ; do
        case "$dotfile" in
            "") ;& # fall through...
            \#*) continue;; # Skip blank or commented lines
            *  ) _source_file "$dotfile" ;;
        esac
    done
}

# TODO: Change this to be an array instead. Comments and blanks allowed.
# https://stackoverflow.com/a/12814475/5353461
# TODO: check if base command installed before trying to configure it.

# Both zsh and bash
_source_files <<DOTFILES
    # Git
    /usr/share/git/completion/git-prompt.sh

    # Ruby
    /usr/share/chruby/chruby.sh
    /usr/share/chruby/auto.sh

    # Node.js
    /usr/share/nvm/init-nvm.sh

    # Python
    /usr/bin/virtualenvwrapper_lazy.sh

    # Must use $HOME as ~ not expanded in double quotes

    # breaks zsh, needs to be before prompt
    # $HOME/.extend.bashrc

    $XDG_CONFIG_HOME/bash/functions
    $tmuxinator_source
    # $HOME/.vim/bundle/gruvbox/gruvbox_256palette.sh

    # Source my personal ones last so they're not overridden
    $XDG_CONFIG_HOME/bash/aliases
DOTFILES
unset tmuxinator_source

# Add directories to $PATH iff they're not already there
# Append directories to $PATH by default
# Based on https://unix.stackexchange.com/a/4973/143394
# and https://unix.stackexchange.com/a/217629/143394
add_to_PATH () {
  local prepend  # Prepend to path if set
  local prefix   # Temporary prepended path
  local IFS      # Avoid restoring for added laziness

  case $1 in
    after|append)   shift;; # Default is to append
    before|prepend) prepend=true; shift;;
  esac

  # Arguments can be single paths or :-separated $PATH-like strings
  for arg; do
    IFS=: # Split argument by path separator
    for dir in $arg; do
      #  Canonicalise symbolic links
      dir=$({ cd -- "$dir" && { pwd -P || pwd; } } 2>/dev/null)
      if [ -z "$dir" ]; then continue; fi  # Skip non-existent directory
      case ":$PATH:" in
        *":$dir:"*) :;; # skip - already present
        *) if [ "$prepend" ]; then
           # ${prefix:+$prefix:} will expand to "" if $prefix is empty to avoid
           # starting with a ":".  Expansion is "$prefix:" if non-empty.
            prefix=${prefix+$prefix:}$dir
          else
            PATH=$PATH:$dir  # Append by default
          fi;;
      esac
    done
  done
  [ "$prefix" ] && PATH=$prefix:$PATH
}

# $PATH must be set after sourcing chruby
add_to_PATH before "$HOME/bin:$XDG_DATA_HOME/miniconda3/bin:$XDG_DATA_HOME/virtualenvs/default/bin:$XDG_DATA_HOME/npm/bin:$HOME/.local/bin:$XDG_DATA_HOME/go/bin"

if ruby_gems=$(ruby -e 'print Gem.user_dir')/bin; then
    add_to_PATH before "$ruby_gems"
fi
add_to_PATH after /usr/lib/systemd:/usr/local/heroku/bin:$HOME/.cabal/bin
# echo $PATH | tr : "\n"; echo;

sh_is_zsh && return

#
# Only bash below this point
#

# Let chruby see ruby versions in the path. Needs to occur after sourcing chruby
# export RUBIES+=( $(which --all --skip-alias --skip-functions ruby | sed -n 's/\/bin\/ruby//gp' |sort -u) )

# Bash only
if sh_is_bash; then
    _source_files <<DOTFILES
    /usr/share/git/completion/git-completion.bash
    # $XDG_DATA_HOME/fzf/.fzf.bash
    /usr/share/fzf/key-bindings.bash
    /usr/share/fzf/completion.bash
    $XDG_CONFIG_HOME/bash/prompt
    $XDG_CONFIG_HOME/bash/completion
DOTFILES
unset -f _source_file _source_files # clean up namespace

# This tells bash to reinterpret PS1 after every command, which we
# need because __git_ps1 will return different text and colors.
# See "prompt" sourced file for _set_bash_prompt
PROMPT_COMMAND='_set_bash_prompt'

# Resolve `trap DEBUG` contention of chruby_auto and _set_bash_prompt
# shellcheck disable=SC2034,2016
if typeset -f "chruby_auto" > /dev/null; then # chruby_auto function is defined
  # Literal as evaluated at runtime
  trap_str='[[ "$BASH_COMMAND" != "$PROMPT_COMMAND" ]] && chruby_auto;'
fi
trap -- "$trap_str _pre_command" DEBUG; unset trap_str
fi


# Setup direnv
# Required after setting the prompt says: https://github.com/direnv/direnv
eval "$(direnv hook bash)"

############################
# Comments only below here #
############################

# alias g=git (done in .bash_aliases)
# This needs to be here - doesn't work inside .bash_aliases for some reason
# See http://stackoverflow.com/a/39507158/5353461
## Not needed in Manjaro with bash-completion
#_xfunc git __git_complete g _git

# # rbenv setup
# eval "$(rbenv init -)"
# export PATH="$HOME/.rbenv/bin:$HOME/.rbenv/plugins/ruby-build/bin:$PATH"

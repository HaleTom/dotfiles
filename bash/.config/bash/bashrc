#!/bin/bash
# shellcheck disable=SC1090  # ShellCheck can't follow non-constant source. Use a directive to specify location.
# shellcheck disable=SC1091  # Not following: ./.config/bash/functions: openBinaryFile: does not exist (No such file or directory)
# Above two lines are for shellcheck's happiness:
# #1) Determine shell. #2) Silence when trying to source a filename in a variable

set -o noclobber  # Use >|file to clobber

# Allow shell-specific code
function sh_is_zsh { [ -n "${ZSH_VERSION:-}" ]; }
function sh_is_bash { [ -n "${BASH_VERSION:-}" ]; }

# Setup functions (required for XDG background checks)
source "$HOME/.config/bash/functions"

# Setup $XDG* variables
source "$HOME/.config/bash/xdg"

# Standard-ish variables
export BROWSER=/usr/bin/google-chrome-stable
export EDITOR='vi -e' VISUAL=vi  # https://unix.stackexchange.com/q/4859/143394
export PAGER=less; [ -x "$HOME"/bin/pager ] && PAGER="$HOME"/bin/pager
export QUOTING_STYLE=shell-escape  # https://www.gnu.org/software/coreutils/manual/html_node/Formatting-the-file-names.html

# MANPAGER: nvim, vim, less
if command -v nvim > /dev/null; then
  # Work around ^H showing instead of bold:
  # export MANPAGER="nvim -c 'set ft=man' -"
  export MANPAGER='less -Ms +Gg'
elif command -v vim > /dev/null; then
  export MANPAGER="vim -M +MANPAGER -"
else
    # Use less with percentage of file viewed
    export MANPAGER='less -Ms +Gg'
fi

# # Use diff-so-fancy if it's installed
# if is_bin_in_path diff-so-fancy; then
#   GIT_PAGER="diff-so-fancy | less -FLRX --tabs=4"
# fi

export BAT_PAGER=less
export GNULIB_SRCDIR="$HOME"/repo/gnulib
export GCC_COLORS=1 # Enable gcc colours, available since gcc 4.9.0
export RSYNC_PARTIAL_DIR=.rsync-tmp-partial # Automatically set --partial-dir with --partial
export GOPATH="$XDG_DATA_HOME/go"
export LIBVA_DRIVER_NAME=iHD  # Check with `vainfo`

# Have less display colours
# from: https://wiki.archlinux.org/index.php/Color_output_in_console#man
export LESS_TERMCAP_mb=$'\e[1;31m'     # begin bold
export LESS_TERMCAP_md=$'\e[1;33m'     # begin blink
export LESS_TERMCAP_so=$'\e[01;44;37m' # begin reverse video
export LESS_TERMCAP_us=$'\e[01;37m'    # begin underline
export LESS_TERMCAP_me=$'\e[0m'        # reset bold/blink
export LESS_TERMCAP_se=$'\e[0m'        # reset reverse video
export LESS_TERMCAP_ue=$'\e[0m'        # reset underline
export LESS='-FMRWXis -x4 -z-4'
# F = exit if all can be displayed on first creen
# M = show line numbers and percentage (at bottom) if known
# R = interpret ANSI colour codes
# W = highlight first unread line (see -z)
# X = don't send termcap initialization and deinitialization strings (eg clear)
# i = smartcase searching
# m = prompt verbosely (like more), with the percent into the file
# s = squash multiple blank lines into one
# x = Convert tabs to <arg> spaces
# z = sets window to n lines less than current terminal given '-n'
# --- Unused ---
# J = status column
# N = number each line
# u = send backspaces and carriage returns directly to the terminal (breaks colored man)

# Have groff emit ANSI codes instead of overstrike
# https://lists.archlinux.org/pipermail/arch-dev-public/2009-February/010411.html
# export GROFF_SGR=1

# Have less highlight source code
# shellcheck disable=SC2016  # $HOME doesn't expand
if [[ -x "$HOME/bin/highlight-less-wrapper" ]]; then
  export LESSOPEN='|-"$HOME/bin/highlight-less-wrapper" "%s"'
fi

# Set $LS_COLORS
[ -x /usr/bin/dircolors ] && eval "$(/usr/bin/dircolors)"

# Colour iostat when on a terminal. This should be default, but needed to be set at 2018-05-21.
export S_COLORS=auto

# Use powerpill as pacman wrapper for makepkg if installed
[[ -x /usr/bin/makepkg && -x /usr/bin/powerpill && -x "$HOME"/bin/powerpill ]] \
  && export PACMAN="$HOME"/bin/powerpill

# ccache
export CCACHE_CONFIGPATH="$XDG_CONFIG_HOME"/ccache.config
export CCACHE_DIR="$XDG_CACHE_HOME"/ccache

# sccache - Rust  https://github.com/mozilla/sccache
# shellcheck disable=SC2155  # Declare and assign separately to avoid masking return values.
is_bin_in_path sccache && export RUSTC_WRAPPER=$(bin_path sccache)

# ssh-ident
export BINARY_SSH=/usr/bin/ssh
export BINARY_SCP=/usr/bin/scp

# fzf  https://github.com/junegunn/fzfhttps://github.com/junegunn/fzf
export FZF_DEFAULT_COMMAND='fd --type f'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND --hidden --exclude .git/"

#
# Python
#

# Prevent creation of ~/.local/{bin,lib}
export PYTHONUSERBASE=$XDG_DATA_HOME/python

# # virtualenvwrapper  (using miniconda instead)
# export WORKON_HOME=$XDG_DATA_HOME/virtualenvs
# # Make virtualenvwrapper use this python by default
# export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python  # Use system python for running virtualenvwrapper
# # export VIRTUALENVWRAPPER_PYTHON=$WORKON_HOME/default/bin/python
# export PROJECT_HOME=$HOME/code # Used by mkproject

# Easier to read colours on Linux TTYs
# https://raw.githubusercontent.com/xero/dotfiles/master/zsh/.zsh/sourcerer.zsh
if [[ $TERM = linux ]]; then
    echo -en '\e]P0222222' #black
    echo -en '\e]P8111111' #darkgrey
    echo -en '\e]P1aa4450' #darkred
    echo -en '\e]P9ff6a6a' #red
    echo -en '\e]P2719611' #darkgreen
    echo -en '\e]PAb1d631' #green
    echo -en '\e]P3cc8800' #brown
    echo -en '\e]PBff9800' #yellow
    echo -en '\e]P46688aa' #darkblue
    echo -en '\e]PC90b0d1' #blue
    echo -en '\e]P58f6f8f' #darkmagenta
    echo -en '\e]PD8181a6' #magenta
    echo -en '\e]P6528b8b' #darkcyan
    echo -en '\e]PE87ceeb' #cyan
    echo -en '\e]P7d3d3d3' #lightgrey
    echo -en '\e]PFc1cdc1' #white
    # clear # for background artifacting
fi

# Update "tmuxinator.{z,ba}sh" symlink if needed
if { [[ -x $(command -v tmuxinator) && -x $(command -v gem) ]] 2>/dev/null; }; then
  tmuxinator_source="$XDG_CONFIG_HOME/tmuxinator/tmuxinator.$(sh_is_zsh && printf zsh || printf bash)"
  # If not a regular file or symlink to one
  if [[ ! -f $tmuxinator_source ]]; then
      # If doesn't exist or already a symlink
      if [[ ! -e $tmuxinator_source || -L $tmuxinator_source ]]; then
          echo "Creating ${tmuxinator_source##*/} symlink:"
          tmp=$(gem which tmuxinator) && # tmuxinator executable
              tmp=$(readlink -f "${tmp%/*}/../completion") && # completion scripts dir
              ln -fsv "$tmp/${tmuxinator_source##*/}" "$tmuxinator_source"
          unset tmp
      else
        echo "Not creating symlink at at existing:"
        ls -lF "$tmuxinator_source"
      fi
  fi
fi

# Source files given as arguments
# shellcheck disable=SC1087,SC2154  # zsh in a bash file
function _source_file {
  # zsh global aliases can cause syntax errors
  sh_is_zsh && setopt local_options no_aliases

  local file=$1
  if [[ -f $file ]]; then
      source "$file"
  else
      yelp "Cannot source $file" >&2
      return 1
  fi
}

# Source .dotfiles listed on STDIN (one per line)
function _source_files {
    while read -r dotfile ; do
        case "$dotfile" in
            "") ;& # fall through...
            \#*) continue;; # Skip blank or commented lines
            *  ) _source_file "$dotfile" ;;
        esac
    done
}

# TODO: Change following heredoc to be an array instead. Comments and blanks allowed.
# https://stackoverflow.com/a/12814475/5353461
# TODO: check if base command installed before trying to configure it.

# Set location of git-prompt.sh
if [[ -r /Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh ]]; then
  _git_prompt_file=/Library/Developer/CommandLineTools/usr/share/git-core/git-prompt.sh
elif [[ -r /usr/share/git/completion/git-prompt.sh ]]; then
  _git_prompt_file=/usr/share/git/completion/git-prompt.sh
fi

# Both zsh and bash

# grc - Generic coloriser
export GRC_ALIASES=true  # Required for grc.sh to not return early
source_first "/etc/profile.d/grc.sh" "/usr/local/etc/grc.sh"; unset GRC_ALIASES;

_source_files >> "$XDG_RUNTIME_DIR/source_files-$(date '+%s')-PID:$$" <<DOTFILES 2>&1
    # Git
    $_git_prompt_file

    # Python
    # /usr/bin/virtualenvwrapper_lazy.sh

    # Must use $HOME as ~ not expanded in double quotes

    # Needs to be before prompt
    # $HOME/.extend.bashrc

    $tmuxinator_source
    # $HOME/.vim/bundle/gruvbox/gruvbox_256palette.sh

    $XDG_CONFIG_HOME/bash/prompt
DOTFILES
unset tmuxinator_source GRC_ALIASES _git_prompt_file

# XDG Base Directory Specification says to include $HOME/.local/bin, but it doesn't get a $XDG_... variable
add_to_path_var PATH before "$HOME/bin:$HOME/.local/bin:$XDG_DATA_HOME/python/bin:$XDG_DATA_HOME/gem/bin:$XDG_DATA_HOME/npm/bin:$XDG_DATA_HOME/go/bin:$XDG_DATA_HOME/cargo/bin:/usr/lib/ccache/bin"

# Handled by bhruby
# if ruby_gems=$(ruby -e 'print Gem.user_dir')/bin; then
#     add_to_PATH before "$ruby_gems"
# fi
add_to_path_var PATH after "/usr/lib/systemd:/usr/local/heroku/bin:$XDG_DATA_HOME/miniconda3/bin:$HOME/.cabal/bin"

# scmpuff  https://github.com/mroth/scmpuff/
is_cmd scmpuff && eval "$(command scmpuff init -s --aliases=false)"

add_to_path_var RUBYLIB before "$HOME"/lib
for _gem_version in /usr/lib/ruby/gems/*; do
  add_to_path_var GEM_PATH before "$_gem_version"
done
unset _gem_version
export GEM_PATH RUBYLIB

# Print a fortune message if login shell or in TMUX
# && and || have equal precedence outside [[ test ]], so put && last
if [[ ${_disable_welcome_message:=0} -eq 0 ]] || \
   { sh_is_bash && shopt -q login_shell; } || { sh_is_zsh && [[ -o login ]]; } || \
   [[ -n ${TMUX=} && _disable_welcome_message -lt $SHLVL ]] && \
   [[ -z $DISABLE_WELCOME ]]; then
  if_cmd ~/bin/welcome-message || if_cmd fortune
fi
export _disable_welcome_message=$(( SHLVL + 1 ))  # Don't print at this $SHLVL again

# Source API keys etc that I don't want to publish to GitHub
[[ -f $XDG_CONFIG_HOME/bash/personal ]] && source "$XDG_CONFIG_HOME/bash/personal"

# Setup ssh-agent
if is_bin_in_path keychain; then
  keychain_load
elif is_bin_in_path ssh-agent ssh-add; then
  ssh_agent_setup
else
  [[ "$-" == *i* ]] && printf "Can't find keychain or ssh-agent/ssh-add in path\n" >&2
fi

# Activate mise    https://mise.jdx.dev/getting-started.html
# Some IDEs may need $XDG_DATA_HOME/mise/shims in $PATH.
command -v /usr/bin/mise &> /dev/null && eval "$(mise activate "${SHELL##*/}")"

# Install fzf shell files if required
if [[ ! -d $XDG_CONFIG_HOME/fzf ]]; then
  is_mac && is_cmd brew fzf && "$(brew --prefix)"/opt/fzf/install --xdg --no-update-rc --key-bindings --completion >/dev/null
  is_linux && ! is_cmd fzf && printf "fzf not found\n" >&2
fi

##############################################################
##############  Only bash below this point  ##################
sh_is_zsh && return
##############################################################
##############################################################

# fzf
is_cmd fzf && source_first "/usr/share/fzf/completion.bash" "/usr/local/opt/fzf/shell/completion.bash"
is_cmd fzf && source_first "/usr/share/fzf/key-bindings.bash" "/usr/local/opt/fzf/shell/key-bindings.bash"

export HISTFILE=$XDG_DATA_HOME/bash/history
# Exclude duplicates and commands starting with a <space> from history
export HISTCONTROL=ignoredups:ignorespace

# Enable extended globbing:
shopt -s extglob failglob globstar
# https://www.gnu.org/software/bash/manual/bash.html#Pattern-Matching
# https://unix.stackexchange.com/questions/276911/is-it-dangerous-to-always-have-extglob-on : TL;DR: no
# globstar enables **/*.txt like in zsh. **/ will match only directories.
# globstar ** doesn't follow symlinks since bash-4.3

# shopt -s histverify  # Show output of !! - press enter twice

# Setup git completion
source_first "/usr/share/git/completion/git-completion.bash" "/Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash"

_source_files <<DOTFILES
    # Completion
    $XDG_CONFIG_HOME/bash/completion

    # Source my personal files last so they're not overridden
    $XDG_CONFIG_HOME/bash/aliases
DOTFILES

# This tells bash to reinterpret PS1 after every command, which we
# need because __git_ps1 will return colors.  See "prompt" sourced file.
PROMPT_COMMAND='_prompt_bash_set'

# Setup direnv
# Required after setting the prompt says: https://github.com/direnv/direnv
command -v direnv &> /dev/null && eval "$(direnv hook bash)"


##############################################################
###############  Comments only below here  ###################
##############################################################

# alias g=git (done in .bash_aliases)
# This needs to be here - doesn't work inside .bash_aliases for some reason
# See http://stackoverflow.com/a/39507158/5353461
## Not needed in Manjaro with bash-completion
#_xfunc git __git_complete g _git

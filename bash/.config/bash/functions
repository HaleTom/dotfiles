#!/bin/bash
# ^ For shellcheck's happiness

# An assortment of useful bash functions. zsh sources this with 'emulate bash'.
# This file is expected to be sourced, not run.

function sh_is_zsh { [[ -n $ZSH_VERSION ]]; }
function sh_is_bash { [[ -n $BASH_VERSION ]]; }

# Allow functions to be accessed from bash sub-shells by:
# 'export_function <func-name>'
function export_function {
  # shellcheck disable=SC2163
  if sh_is_bash; then export -f "$@"; fi
  # zsh can't export functions: https://stackoverflow.com/a/1896039/5353461
}
export_function sh_is_bash sh_is_zsh

#
######### Start non-exported functions ##########
#
# These are to be run interactively, not by scripts

# less - highlight occurrences of first argument
lessh() { e="$1"; shift; less -i -p "*$e" "$@"; }

# grep - highlight occurrences of expression
greph() { e="$1"; shift; grep --col=always -Eih "$e|$" "$@"; }

# Print the hex and decimal value of the first character given
ord() { printf '%x\n' "'$1"; }
ord10() { printf '%d\n' "'$1"; }

# diff-so-fancy
dsf() { git diff --no-index --color "$@" | diff-so-fancy; }

##
######### End non-exported functions ##########
##

# Say the file, line number and optional message for debugging
# Inspired by bash's `caller` builtin
# Thanks to https://unix.stackexchange.com/a/453153/143394
# shellcheck disable=2120  # Use of global $*
function yelp () {
  # shellcheck disable=SC2154  # undeclared zsh variables in bash
  if [[ $BASH_VERSION ]]; then
    local file=${BASH_SOURCE[1]} func=${FUNCNAME[1]} line=${BASH_LINENO[0]}
  else  # zsh
    emulate -LR zsh  # Ensure 1-numbered arrays, regardless of KSH_ARRAYS option
    # $funcfiletrace has format:  file:line
    local file=${funcfiletrace[1]%:*} line=${funcfiletrace[1]##*:}
    local func=${funcstack[2]}
  fi
  local quoter
  # Use shell-quote if it exists (nicer output in bash)
  if is_cmd shell-quote; then
    quoter=(shell-quote  --)
  else
    quoter=(token_quote)
  fi
  echo "${file##*/}:$func:$line $("${quoter[@]}" "$@")" >&2
}
export_function yelp


# Print the name of the function calling me
function func_name() {
  if [[ -n $BASH_VERSION ]]; then
    printf "%s\n" "${FUNCNAME[1]}"
  else  # zsh
    printf "%s\n" "${funcstack[@]:1:1}"  # Use offset:length as array indexing may start at 1 or 0
  fi
}
export_function func_name


# Return the first pathname in $PATH for name in $1
function bin_path () {
  if sh_is_zsh; then
    builtin whence -cp "$1" 2> /dev/null
  else  # bash
     builtin type -P "$1"  # No output if not in $PATH
  fi
}
export_function bin_path


# True iff all arguments are executable in $PATH
# Works in both {ba,z}sh
# https://stackoverflow.com/a/53798785/5353461
function is_bin_in_path {
  if [[ -n $ZSH_VERSION ]]; then
    builtin whence -p "$1" &> /dev/null
  else  # bash:
    builtin type -P "$1" &> /dev/null
  fi || return 1  # Nope

  if [[ $# -gt 1 ]]; then
    shift  # We've just checked the first one
    is_bin_in_path "$@"
  fi
}
export_function is_bin_in_path


# Are all args a command?
# Note: fails on shell reserved words
function is_cmd {
  command -v "$1" >&/dev/null || return 1
  if [[ $# -gt 1 ]]; then
    shift  # We've just checked the first one
    is_cmd "$@"
  fi
}
export_function is_cmd


# Usage: fallback_to cat <pretty-cat> <arg(s)>
function fallback_to {
  if is_bin_in_path "$2"; then
    "$2" "${@:3}"
  else
    "$1" "${@:3}"
  fi
}
export_function fallback_to


# Run a command only if it exists
function if_cmd {
  if command -v "$1" &> /dev/null; then
    "$@"
  else
    return 1
  fi
}
export_function if_cmd

# Run a binary only if it exists in $PATH
function if_bin {
  is_bin_in_path "$1" && "$@"
}
export_function if_bin


# Copy / rename a function
# https://stackoverflow.com/a/18839557/5353461
func_copy() {
  test -n "$(declare -f "$1")" || return 1
  eval "${_/$1/$2}"
}
func_rename() {
  func_copy "$@" || return 1
  unset -f "$1"
}
export_function func_copy func_rename


function ostype () {
  case "$OSTYPE" in
    solaris)       echo "SOLARIS" ;;
    darwin)        echo "OSX" ;;
    linux*)        echo "LINUX" ;;
    bsd*)          echo "BSD" ;;
    msys|cygwin)   echo "WINDOWS" ;;
    *)             echo "unknown: $OSTYPE" ;;
  esac
}

function is_mac () { [[ $(ostype) == OSX ]]; }
function is_linux () { [[ $(ostype) == LINUX ]]; }
export_function ostype is_mac is_linux

# Execute statements in $@ if $DEBUG is set
function debug () {
  if [[ -n $DEBUG ]]; then
    eval "$(token_quote "$@")"
  fi
}
export_function debug


# Safely remove the given entry from $PATH
# https://unix.stackexchange.com/a/253760/143394
function remove_from_PATH {
  while case $PATH in
          "$1") unset PATH; false;;
          "$1:"*) PATH=${PATH#"$1:"};;
          *":$1") PATH=${PATH%":$1"};;
          *":$1:"*) PATH=${PATH%%":$1:"*}:${PATH#*":$1:"};;
          *) false;;
        esac
  do
    :
  done
}


# Expand the variable named by $1 into its value. Works in both {ba,z}sh
# eg: a=HOME $(var_expand $a) == /home/me
# https://unix.stackexchange.com/a/472058/143394
# https://unix.stackexchange.com/a/472066/143394
# https://stackoverflow.com/a/52556475/5353461
var_expand() {
  if [ "$#" -ne 1 ] || [ -z "${1-}" ]; then
    printf 'var_expand: expected one argument\n' >&2;
    return 1;
  fi
  eval printf '%s' "\"\${$1}\""
}
export_function var_expand


# Set variable $1 to value given in $2
var_set () {
  if [ "$#" -ne 2 ] || [ -z "${1}" ]; then
    printf 'var_set: expected one argument\n' >&2;
    return 1;
  fi
  eval "$1=\"\$2\""
}


# Add directories to $PATH iff they're not already there
# Append directories to $PATH by default
# Based on https://unix.stackexchange.com/a/4973/143394
# and https://unix.stackexchange.com/a/217629/143394
# and https://unix.stackexchange.com/a/149054/143394
# TODO: add move-to-front ability: https://unix.stackexchange.com/a/401978/143394
# or just remove then add to front :)
add_to_path_var () {
  local path_var  # Name of $PATH-like variable to operate upon
  local path_val  # Value of $path_var
  local prepend   # Flag: prepend to path if non-null
  local canon     # Canonical name of directory to add
  local prefix    # Temporary prepended path
  local suffix    # Temporary appended path
  local IFS       # Avoid restoring for added laziness

  if [[ "$#" -lt 3 ]]; then
    echo "Usage: add_to_path_var <variable> (before|after) <path-string> ..." >&2
    return 1
  fi

  path_var=$1
  path_val=$(var_expand "$path_var")
  case $2 in
    after|append)   :;; # Default is to append
    before|prepend) prepend=true;;
  esac
  shift 2

  # Arguments can be single paths or :-separated $PATH-like strings
  IFS=: # Split argument by path separator
  for arg; do  # Allow multiple path-strings to add
    for dir in $arg; do  # Automatically split on : due to $IFS
      [ ! -d "$dir" ] && continue  # Skip non-existent directories

      # Canonicalise symbolic link to avoid adding when target already there
      canon=$({ cd -- "$dir" && { pwd -P || pwd; } } 2>/dev/null)

      case ":$path_val:" in  # Add : on both sides for easy matching
        *":$dir:"*|*":$canon:"*) :;;  # Skip - already present
        *) if [ "$prepend" ]; then
           # ${prefix:+$prefix:} will expand to "" if $prefix is empty to avoid
           # starting with a ":".  Expansion is "$prefix:" if non-empty.
            prefix=${prefix:+$prefix:}$dir  # only add : if non-null
          else  # Append by default
            suffix=${suffix:+$suffix:}$dir
          fi;;
      esac
    done
  done

  # Only add prefix / suffix if non-null and only add : if $path_val non-null
  if [ "$prepend" ] && [ -n "$prefix" ]; then
    path_val=${prefix}${path_val:+:$path_val}
  elif [ ! "$prepend" ] && [ -n "$suffix" ]; then
    path_val=${path_val:+$path_val:}${suffix}
  fi
  var_set "$path_var" "$path_val"
}


# Quote the contents of "$@"
# See also ~/bin/token-quote for prettier, user-facing quoting
function token_quote {
  if_cmd ~/bin/token-quote "$@" && return

  # Else, do it manually
  local quoted=()
  for token; do
    quoted+=( "$(printf '%q' "$token")" )
  done
  printf '%s\n' "${quoted[*]}"
}
export_function token_quote


# https://stackoverflow.com/q/52465777/5353461
# https://stackoverflow.com/a/52465819/5353461
# https://superuser.com/a/1360645/365890
function readline_ANSI_escape() {
  if [[ $# -ge 1 ]]; then
    echo "$*"
  else
    cat  # Read string from STDIN
  fi | \
  perl -pe 's/(?:(?<!\x1)|(?<!\\\[))(\x1b\[[0-9;]*[mG])(?!\x2|\\\])/\x1\1\x2/g'
}


# Join the elements of $2... with $1 as a delimiter
# https://stackoverflow.com/a/17841619
function array_join {
  local delim=$1; shift
  echo -n "$1"; shift
  printf "%s" "${@/#/$delim}"
}


# Echo literally what follows, including ';', '#', etc.
# A single blank after 'echo literally' is assumed
# https://unix.stackexchange.com/q/456508/143394
echo_literally_helper() {
  local str
  if [[ $BASH_VERSION ]]; then
    # History substitution makes this fail, eg:  echo_literally !$
    str=$(history 1)
    # shopt extglob; echo "${str#+(?)echo_literally[[:blank:]]}"  # remove leading space number space
    echo "$str" | sed -En 's/^ *[0-9]+ +[[:graph:]]+[[:blank:]]//p'
  else  # zsh
    # shellcheck disable=2154  # history variable not assigned
    str=${history[$(print -P %h)]}
    echo "${str#*echo_literally[[:blank:]]}"
  fi
}
alias echo_literally='echo_literally_helper #'


# Run the command given by "$@" in the background
silent_background() {
  if [[ -n $ZSH_VERSION ]]; then  # zsh:  https://superuser.com/a/1285272/365890
    setopt local_options no_notify no_monitor
    # We'd use &| to background and disown, but incompatible with bash, so:
    "$@" &
  elif [[ -n $BASH_VERSION ]]; then  # bash: https://stackoverflow.com/a/27340076/5353461
    { 2>&3 "$@"& } 3>&2 2>/dev/null
  else  # Unknownness - just background it
    "$@" &
  fi
  disown &>/dev/null  # /dev/null to prevent whine if job has already completed
}
export_function silent_background


# Change directory to the deepest existant part of a path
function cdup {
  # Eg:
  # $ mkdir -p a/b/c
  # $ cdup a/b/c/d/e
  # $ pwd
  # ~/a/b/c

  try="$1"
  [[ $# -ne 1  ]] && { echo "$(func_name): Must specify one directory" 2>&1; return 1; }

  until [[ $try == . ]]; do
      if [[ -d $try && -x $try ]]; then
          cd "$try" && return "$?"
      fi
      try=$(dirname "$try")
  done
  return 1 # Couldn't cd to any part of the path
}
export_function cdup


function nbin {
  local dir;
  dir=$(npm bin)
  if [ -d "$dir" ]; then
    (  # subshell to not change this shell's $PATH   #' Grr, vim syntax-highlight
      PATH=$dir:$PATH
      eval $(token_quote "$@")
    )
  else
    echo "\"$dir\" is not an npm binary directory." >&1
    return 1
  fi
}


# function man {
#   if command -v man &>/dev/null; then
#     export MANPAGER='nvim +Man!'
#     command man "$@"
#     return
#   fi
#
#   # Vim from here down:
#   local vman=${XDG_DATA_HOME-$HOME/.local/share}/vim/bundle/vim-superman/bin/vman
#   # shellcheck disable=2034
#   local EDITOR=vim  # https://github.com/jez/vim-superman/issues/19
#   if [[ -t 1 && -x $vman ]]; then
#     # STDOUT is a tty, $vman is executable
#     for arg; do # Loop over "$@"
#       case "$arg" in
#         --) break;; # end of options
#         -[sS]*|--section=*) continue ;; #These work with vim's :Man
#         -*) vman=$(command -v man) # unknown option. Use usual man instead.
#       esac
#     done
#     "$vman" "$@"
#   else
#     command man "$@"
#   fi
# }

######### End non-exported functions ##########

# True if argument is a function. Works in zsh and bash
# https://unix.stackexchange.com/a/332047/143394
is_function() {
    typeset -f "$1" > /dev/null
}
export_function is_function


# Read a single char from /dev/tty, prompting with "$*"
# Note: pressing enter will return a null string. Perhaps a version terminated with X and then remove it in caller?
# See https://unix.stackexchange.com/a/367880/143394 for dealing with multi-byte, etc.
function get_keypress {
  local REPLY IFS=
  >/dev/tty printf '%s' "$*"

  [[ $ZSH_VERSION ]] && read -rk1  # Use -u0 to read from STDIN
  # See https://unix.stackexchange.com/q/383197/143394 regarding '\n' -> ''
  [[ $BASH_VERSION ]] && </dev/tty read -rn1
  printf '%s' "$REPLY"
}
export_function get_keypress


# Prompt for a keypress to continue. Customise prompt with $*
function pause {
  >/dev/tty printf '%s' "${*:-Press any key to continue... }"
  if [[ ${BASH_VERSION:-} ]]; then
    </dev/tty read -rsn1
  else  # zsh
    read -krs  # Use -u0 to read from STDIN
  fi
  printf '\n'
}
export_function pause


# Make a directory and move the working directory
function mkcd {
  if [ "$#" -ne 1 ]; then
    echo "$(func_name): Make and change into a directory" >&2
    echo "Usage: $(func_name) DIRECTORY" >&2
    return 69
  fi

  [[ -d "$1" ]] && exit=2 && echo "$(func_name): Warning: $1 already exists." >&2
  mkdir -p "$1" || return 1
  cd "$1" || return 1
  return "${exit:-0}"
}
export_function mkcd

# Run a command and create the destination directory tree if required
# The last argument is considered the destination and  checked for possible creation
# If it ends in / it is assumed to be a directory
# Else, it is assumed to be a destination file
function md {
  if [ "$#" -lt 2 ]; then
    echo "$(func_name): Run command, creating destination directory if needed" >&2
    echo "Usage: $(func_name) <command> [options] <dest>" >&2
    echo "If <dest> ends with a '/', it is created, else its parent" >&2
    return 69
  fi

  local dest dir
  dest=${*:$#}
  if [[ $dest = */ ]]; then
    dir=$dest
  else
    dir=$(dirname "$dest")
  fi

  if [[ ! -d $dir ]]; then
    mkdir -p "$dir"
    printf "%s: created directory %s\n" "$(func_name)" "$dir" >&2
  fi

  "${@:1}"
}
export_function md


#------ function make_completion_wrapper

# Updating? Start here: http://superuser.com/a/437508/365890 for one included into bash-it.

# The below is based on an earlier version at: https://ubuntuforums.org/showthread.php?t=733397
# See also: (my answer) http://unix.stackexchange.com/questions/4219/how-do-i-get-bash-completion-for-command-aliases/4220#4220

# Wraps a completion function, eg for use with an alias.
# Usage:
# make-completion-wrapper <actual completion function> <name of new func.>
#                         <command name> <list supplied arguments>
# eg.
#   alias agi='apt-get install'
#   make-completion-wrapper _apt_get _apt_get_install apt-get install
#     # defines a function called _apt_get_install (that's $2) that will
#     # complete the 'agi' alias.
#   complete -F _apt_get_install agi
function make_completion_wrapper {
  local function_name="$2"
  local arg_count=$(( $#-3 ))
  local comp_function_name="$1"
  shift 2
  local funktion="function $function_name {
  (( COMP_CWORD += $arg_count ))
  COMP_WORDS=( \"\$@\" \${COMP_WORDS[@]:1} )
  \"$comp_function_name\"
}"
eval "$funktion"
# echo "$funktion"
}
export_function make_completion_wrapper


# Print the absolute path of the containing directory
function abs_dirname {
  if [[ $# = 0 ]]; then set .; fi # current directory if no arguments
  for path in "$@"; do
    (cd "${dir:="$(dirname "$path")"}" && pwd || exit 1 )
    [[ ! $? ]] && return 1
  done
}
export_function abs_dirname


# Wrapper for systems that don't support `readlink -f`
function abs_path {
  for _ in $(eval echo "{1..$#}"); do
    # Warning: Doesn't work when called with '..'
    # echo $(cd $(dirname "$1") && pwd -P)/$(basename "$1")
    # path=$(cd $(dirname "$1" || return 1) && pwd -P) &&
    #   path="$path"/$(basename "$1")
    # [[ $? -ne 0 ]] && return 1
    # echo "$path"
    readlink -f "$1" || return 1
    shift
  done
}
export_function abs_path


# The name of the git directory (usually '.git') of the current repository
function git_dir {
  # $_ is currently overwitten by chruby_auto
  local dir
  dir=$(git rev-parse --git-dir) || return 1
  abs_path "$dir"
}
export_function git_dir


# TL;DR: Just use printf "%q\n" "$@"
# Escape arguments for use in eval. From
# http://stackoverflow.com/questions/12162010/posix-sh-equivalent-for-bash-s-printf-q

# Usage examples at: http://search.cpan.org/~rosch/String-ShellQuote-1.03/shell-quote
function quote_args {
  case $# in 0) return 0; esac
  while :; do
    printf "'"
    printf %s "$1" | sed "s/'/'\\\\''/g"
    shift
    case $# in 0) break; esac
    printf "' "
  done
  printf "'\\n"
}
export_function quote_args


function double_quote {
  case $# in 0) return 0; esac
  while :; do
    printf '"'
    printf %s "$1" | sed 's/\([$`\!"]\)/\\\1/g'
    shift
    case $# in 0) break; esac
    printf '" '
  done
  printf '"\n'
}
export_function double_quote


# Get a y/n from the user, return yes=0, no=1 enter=$2
# Prompt using $1.
# If set, return $2 on pressing enter, useful for cancel or defualting
function get_yes_keypress {
  local prompt="${1:-Are you sure [y/n]? }"
  local enter_return=$2
  local REPLY
  while REPLY=$(get_keypress "$prompt"); do
    [[ $REPLY ]] && printf '\n' # $REPLY blank if user presses enter
    case "$REPLY" in
      Y|y)  return 0;;
      N|n)  return 1;;
      '')   [[ $enter_return ]] && return "$enter_return"
    esac
  done
}
export_function get_yes_keypress


# Prompt to confirm, defaulting to NO on <enter>
# Usage: confirm "Dangerous. Are you sure?" && rm *
# For a shorter non-single-key version
# http://unix.stackexchange.com/a/14444/143394
function confirm {
  local prompt="${*:-Are you sure} [y/N]? "
  get_yes_keypress "$prompt" 1
}
export_function confirm


# Prompt to confirm, defaulting to YES on <enter>
function confirm_yes {
  local prompt="${*:-Are you sure} [Y/n]? "
  get_yes_keypress "$prompt" 0
}
export_function confirm_yes


function keychain_load {
  noask=''; [[ ! -t 0 || ! -t 1 ]] && noask='--noask'  # Don't ask for password if either STDIN or STDOUT is !isatty
  # [[ ! -t 0 || ! -t 1 ]] && echo Setting keychain noask='--noask'  # Don't ask for password if either STDIN or STDOUT is !isatty

  # If ever going to include "$(shell-quote "$@")" in the below, it must go after "$keys":
  # Null argument before keys causes keys not to be processed - https://github.com/funtoo/keychain/issues/123

  # I'm using both --confhost and $keys as because:
  # --confhost doesn't open any IdentityFile(s)  https://github.com/funtoo/keychain/issues/121
  keys='' && [[ -r ~/.ssh/keychain-keys ]] && keys=$(cat ~/.ssh/keychain-keys)
  eval $(keychain --eval --quiet --agents ssh --inherit local-once --absolute --dir "$XDG_CACHE_HOME"/keychain --confhost --quick "$keys" "$noask")
}
export_function keychain_load


# Setup ssh-agent (used if no keychain)
# From: http://rabexc.org/posts/pitfalls-of-ssh-agents
function ssh_agent_setup() {
  local agent_info=$XDG_CACHE_HOME/ssh-agent
  # yelp Setting up ssh agent...
  ssh-add -l &>/dev/null
  if [ "$?" == 2 ]; then  # Unable to contact ssh-agent
    [ -r "$agent_info" ] && eval "$(<"$agent_info")" >/dev/null
    # yelp Read "$agent_info"

    ssh-add -l &>/dev/null  # Check loaded agent details are valid
    if [ "$?" == 2 ]; then
      (umask 066; ssh-agent >| "$agent_info")
      eval "$(<"$agent_info")" >/dev/null
      # yelp Wrote new "$agent_info"
    fi
  fi
}
export_function ssh_agent_setup


# Print the name of the git repository's working tree's root directory
# https://stackoverflow.com/a/38843585/5353461
# https://stackoverflow.com/a/38852055/5353461
# Or, shorter:
# (root=$(git rev-parse --git-dir)/ && cd ${root%%/.git/*} && git rev-parse && pwd)
# but this doesn't cover external $GIT_DIRs which are named other than .git
function git_root {
  local root signature
  # git displays its own error if not in a repository
  root=$(git rev-parse --show-toplevel 2>/dev/null)
  if [[ -n $root ]]; then
    echo "$root"
    return
  elif [[ $(git rev-parse --is-inside-git-dir 2>/dev/null) = true ]]; then
    # We're inside the .git directory
    # Store the root (can be more than 1) and latest branch commits, then compare to what's obtained from the parent directory
    # It's possible that $GIT_DIR points somewhere not inside the working tree
    if ! signature=$({ git rev-list --max-parents=0 @; git for-each-ref refs/heads --format='%(objectname)'; } 2>/dev/null); then
      echo "$(func_name): Can't get initial commit" >&2
      return 1
    fi
    root=$(git rev-parse --git-dir 2>/dev/null)/.. &&
      # subshell so we don't change the user's working directory
    ( cd "$root" &&
      if [[ $({ git rev-list --max-parents=0 @; git for-each-ref refs/heads --format='%(objectname)'; } 2>/dev/null) = "$signature" ]]; then
        pwd && return
      else
        echo "$(func_name): git directory is not inside its repository" >&2
        return 1
      fi
    )
  else
    echo "$(func_name): Can't determine repository root" >&2
    return 1
  fi
}
export_function git_root


# Change working directory to git repository root
function cd_git_root {
  local root
  root=$(git_root) || return # git_root will print any errors
  cd "$root" || return
}
export_function cd_git_root


# apt: Update only given sources
function apt_update_repo() {
  for source in "$@"; do
    sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/${source}" \
    -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
  done
}
export_function apt_update_repo


ansi_colours() {
        local fgc bgc vals seq0

        # shellcheck disable=SC2016
        printf 'Color escapes are %s\n' '\e[${value};...;${value}m'
        printf 'Values 30..37 are \e[33mforeground colors\e[m\n'
        printf 'Values 40..47 are \e[43mbackground colors\e[m\n'
        printf 'Value  1 gives a  \e[1mbold-faced look\e[m\n'
        printf '%s\n\n' 'printf "\e[m" resets'

        # foreground colors
        for fgc in $(seq 30 37); do
                # background colors
                for bgc in $(seq 40 47); do
                        fgc=${fgc#37} # white
                        bgc=${bgc#40} # black

                        vals="${fgc:+$fgc;}${bgc}"
                        vals=${vals%%;}

                        seq0="${vals:+\e[${vals}m}"
                        printf "  %-9s" "${seq0:-(default)}"
                        printf " ${seq0}TEXT\\e[m"
                        printf ' \e[%s1mBOLD\e[m' "${vals:+${vals+$vals;}}"
                done
                echo; echo
        done
}
export_function ansi_colours

#!/bin/bash

# Functions to be sourced by .bashrc
# Ensure that ones to be accessed outside of .bashrc have an 'export -f <func-name>'


######### Start non-exported functions ##########

# Single line functions

# less - highlight occurences of first argument
lessh() { e="$1"; shift; less -i -p "*$e" "$@"; }

# grep - highlight occurences of expression
greph() { e="$1"; shift; grep --col=always -Eih "$e|$" "$@"; }

######### End non-exported functions ##########



# Make a directory and move the working directory
function mkcd {
	if [ "$#" -ne 1 ]; then
		echo "mkcd: Make and change into a directory" >&2
		echo "Usage: mkcd DIRECTORY" >&2
		return 69
	fi

  [[ -d "$1" ]] && exit=2 && echo "mkcd: Warning: $1 already exists." >&2
	mkdir -p "$1" || return 1
	cd "$1" || return 1
  return ${exit:-0}
}
export -f mkcd


#------ function make-completion-wrapper

# Updating? Start here: http://superuser.com/a/437508/365890 for one included into bash-it.

# The below is based on an earlier version at: https://ubuntuforums.org/showthread.php?t=733397
# See also: (my answer) http://unix.stackexchange.com/questions/4219/how-do-i-get-bash-completion-for-command-aliases/4220#4220

# Wraps a completion function, eg for use with an alias.
# Usage:
# make-completion-wrapper <actual completion function> <name of new func.>
#                         <command name> <list supplied arguments>
# eg.
#   alias agi='apt-get install'
#   make-completion-wrapper _apt_get _apt_get_install apt-get install
#     # defines a function called _apt_get_install (that's $2) that will
#     # complete the 'agi' alias. 
#   complete -F _apt_get_install agi
function make-completion-wrapper {
  local function_name="$2"
  local arg_count=$(( $#-3 ))
  local comp_function_name="$1"
  shift 2
  local funktion="function $function_name {
      (( COMP_CWORD += $arg_count ))
      COMP_WORDS=( \"\$@\" \${COMP_WORDS[@]:1} )
      \"$comp_function_name\"
    }"
  eval "$funktion"
  # echo "$funktion"
}
export -f make-completion-wrapper

# Print the absolute path of the containing directory
function abs_dirname {
  if [[ $# = 0 ]]; then set .; fi # current directory if no arguments
  for path in "$@"; do 
    (cd "${dir:="$(dirname "$path")"}" && pwd || exit 1 )
    [[ $? -ne 0 ]] && return 1
  done
}
export -f abs_dirname


# Wrapper for systems that don't support `readlink -f`
function abs_path {
  for _ in $(eval echo "{1..$#}"); do
    # Warning: Doesn't work when called with '..'
    # echo $(cd $(dirname "$1") && pwd -P)/$(basename "$1")
    # path=$(cd $(dirname "$1" || return 1) && pwd -P) &&
    #   path="$path"/$(basename "$1")
    # [[ $? -ne 0 ]] && return 1
    # echo "$path"
    readlink -f "$1" || return 1
    shift
  done
}
export -f abs_path


# The name of the git directory (usually '.git') of the current repository
function git_dir {
  # $_ is currently overwitten by chruby_auto
  local dir
  dir=$(git rev-parse --git-dir) || return 1
  abs_path "$dir"
}
export -f git_dir


# TL;DR: Just use printf "%q " "$@"
# Escape arguments for use in eval. From
# http://stackoverflow.com/questions/12162010/posix-sh-equivalent-for-bash-s-printf-q

# Usage examples at: http://search.cpan.org/~rosch/String-ShellQuote-1.03/shell-quote
function quote_args {
    case $# in 0) return 0; esac
    while :
    do
        printf "'"
        printf %s "$1" | sed "s/'/'\\\\''/g"
        shift
        case $# in 0) break; esac
        printf "' "
    done
    printf "'\n"
}
export -f quote_args

function double_quote {
    case $# in 0) return 0; esac
    while :
    do
        printf '"'
        printf %s "$1" | sed 's/\([$`\!"]\)/\\\1/g'
        shift
        case $# in 0) break; esac
        printf '" '
    done
    printf "\"\n"
}
export -f double_quote

# http://unix.stackexchange.com/a/14444/143394
# Usage: confirm "Really" && rm /
function confirm_no {
  local reply
  read -rn 1 -p "$* [y/N]? " reply
  printf "\n"
  case "$reply" in
    Y|y* ) true;;
    * )    false;;
  esac
}
export -f confirm_no

function confirm_yes {
  local reply
  read -rn 1 -p "$* [Y/n]? " reply
  printf "\n"
  case "$reply" in
    N|n* ) false;;
    * )    true;;
  esac
}
export -f confirm_yes


# Print the name of the git repository's working tree's root directory
# Search for 'Tom Hale' in http://stackoverflow.com/questions/957928/is-there-a-way-to-get-the-git-root-directory-in-one-command
# Or, shorter: 
# (root=$(git rev-parse --git-dir)/ && cd ${root%%/.git/*} && git rev-parse && pwd)
# but this doesn't cover external $GIT_DIRs which are named other than .git
function git_root {
  local root first_commit
  # git displays its own error if not in a repository
  root=$(git rev-parse --show-toplevel) || return
  if [[ -n $root ]]; then
    echo "$root"
    return
  elif [[ $(git rev-parse --is-inside-git-dir) = true ]]; then
    # We're inside the .git directory
    # Store the commit id of the first commit to compare later
    # It's possible that $GIT_DIR points somewhere not inside the repo
    first_commit=$(git rev-list --parents HEAD | tail -1) || # --reverse with head -1?
      echo "$0: Can't get initial commit" 2>&1 && false && return
    root=$(git rev-parse --git-dir)/.. &&
      # subshell so we don't change the user's working directory
    ( cd "$root" &&
      if [[ $(git rev-list --parents HEAD | tail -1) = "$first_commit" ]]; then
        pwd
      else
        echo "${FUNCNAME[0]}: git directory is not inside its repository" 2>&1
        false
      fi
    )
  else
    echo "${FUNCNAME[0]}: Can't determine repository root" 2>&1
    false
  fi
}
export -f git_root


# Change working directory to git repository root
function cd_git_root {
  local root
  root=$(git_root) || return # git_root will print any errors
  cd "$root" || return
}
export -f cd_git_root


# apt: Update only given sources 
function apt-update-repo() {
    for source in "$@"; do
        sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/${source}" \
        -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"    
    done
}
export -f apt-update-repo


##################
# Set the prompt #
##################
# Generate *+%$ decorations very cleanly:
# https://github.com/mathiasbynens/dotfiles
# Or see https://github.com/magicmonty/bash-git-prompt (not used here)

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Select git info displayed, see /usr/lib/git-core/git-sh-prompt for more
export GIT_PS1_SHOWDIRTYSTATE=1           # '*'=unstaged, '+'=staged
export GIT_PS1_SHOWSTASHSTATE=1           # '$'=stashed
export GIT_PS1_SHOWUNTRACKEDFILES=1       # '%'=untracked
export GIT_PS1_SHOWUPSTREAM="verbose"     # 'u='=no difference, 'u+1'=ahead by 1 commit
export GIT_PS1_STATESEPARATOR=''          # No space between branch and index status
export GIT_PS1_DESCRIBE_STYLE="describe"  # detached HEAD style:
#  contains      relative to newer annotated tag (v1.6.3.2~35)
#  branch        relative to newer tag or branch (master~4)
#  describe      relative to older annotated tag (v1.6.3.1-13-gdd42c2f)
#  default       exactly eatching tag

# Check if we support colours
__colour_enabled() {
    local -i colors
    colors=$(tput colors 2>/dev/null)
    [[ $? -eq 0 ]] && [[ $colors -gt 2 ]]
}

# Sets prompt like: ravi@boxy:~/prj/sample_app
__set_bash_prompt() {
    local exit="$?" # Save the exit status of the last command

    # PS1 is made from $PreGitPS1 + <git-status> + $PostGitPS1
    local PreGitPS1="${debian_chroot:+($debian_chroot)}"
    local PostGitPS1=""

    # Disable unused variables check for unused colours
    # shellcheck disable=SC2034
    # https://github.com/koalaman/shellcheck/issues/145
    if  __colour_enabled; then
        export GIT_PS1_SHOWCOLORHINTS=1;

        # Wrap the colour codes between \[ and \], so that
        # bash counts the correct number of characters for line wrapping:
        local Red='\[\e[0;31m\]'; local BRed='\[\e[1;31m\]'
        local Gre='\[\e[0;32m\]'; local BGre='\[\e[1;32m\]'
        local Yel='\[\e[0;33m\]'; local BYel='\[\e[1;33m\]'
        local Blu='\[\e[0;34m\]'; local BBlu='\[\e[1;34m\]'
        local Mag='\[\e[0;35m\]'; local BMag='\[\e[1;35m\]'
        local Cya='\[\e[0;36m\]'; local BCya='\[\e[1;36m\]'
        local Whi='\[\e[0;37m\]'; local BWhi='\[\e[1;37m\]'
        local None='\[\e[0m\]' # Return to default colour
    else # No colour
        unset GIT_PS1_SHOWCOLORHINTS
        local Red BRed Gre BGre Yel BYel Blu BBlu Mag BMag Cya BCya Whi BWhi None
    fi

    # No username and bright colour if root
    if [[ ${EUID} = 0 ]]; then
        PreGitPS1+="$BRed\h "
    else
        PreGitPS1+="$Red\u@\h$None:"
    fi

    PreGitPS1+="$Blu\w$None"

    
    # Now build the part after git's status

    # Highlight non-standard exit codes
    if [[ $exit != 0 ]]; then
        PostGitPS1="$Red[$exit]"
    fi

    # Change colour of prompt if root
    if [[ ${EUID} == 0 ]]; then
        PostGitPS1+="$BRed"'\$ '"$None"
    else
        PostGitPS1+="$Mag"'\$ '"$None"
    fi

    # Set PS1 from $PreGitPS1 + <git-status> + $PostGitPS1
    __git_ps1 "$PreGitPS1" "$PostGitPS1" '(%s)'
    # echo '$PS1='"$PS1"

    # defaut user prompt:
    # PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[01;34m\] \w\[\033[00m\] $(__git_ps1 "(%s)") \$ '
}

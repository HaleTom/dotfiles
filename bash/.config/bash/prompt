#!/bin/bash
# _options=$(shopt -op); set -exu # save and set shell options for testing

##################
# Set the prompt #   Sourced from .bashrc
##################

# Generate *+%$ decorations very cleanly:
# https://github.com/mathiasbynens/dotfiles
# Or see https://github.com/magicmonty/bash-git-prompt (not used here)

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# Select git info displayed, see /usr/lib/git-core/git-sh-prompt for more
export GIT_PS1_SHOWDIRTYSTATE=1           # '*'=unstaged, '+'=staged
export GIT_PS1_SHOWSTASHSTATE=1           # '$'=stashed
export GIT_PS1_SHOWUNTRACKEDFILES=1       # '%'=untracked
export GIT_PS1_SHOWUPSTREAM="verbose"     # 'u='=no difference, 'u+1'=ahead by 1 commit
export GIT_PS1_STATESEPARATOR=''          # No space between branch and index status
export GIT_PS1_DESCRIBE_STYLE="describe"  # detached HEAD style:
#  describe      relative to older annotated tag (v1.6.3.1-13-gdd42c2f)
#  contains      relative to newer annotated tag (v1.6.3.2~35)
#  branch        relative to newer tag or branch (master~4)
#  default       exactly eatching tag


# Check if we support colours
_colour_enabled() {
  local -i colors
  colors=$(tput colors 2>/dev/null)
  [[ $? ]] && [[ $colors -gt 2 ]]
}

# Commands inside the git prompt make sshfs prompts slooooow.
# By filesystem:  https://unix.stackexchange.com/questions/72223/check-if-folder-is-a-mounted-remote-filesystem
_possibly_disable_git_prompt() {
  # echo "Running possibly_disable_git_prompt()"
  unset _disable_git_prompt # default git section of prompt emabled
  case $PWD in # ;& is fall-through
    /ssh/*) ;&
    # /other/directory*) ;&
    disable) # Won't match itself as all paths start with /   #' < Syntastic bug
      # echo "Set _disable_git_prompt=true"
      _disable_git_prompt=true # existance matters, value is irrelevant
  esac
}

# Commands to run after changing directory
_cd_hook () {
  # echo "Running _cd_hook()"
  if [ "$PWD" == "${_last_cmd_pwd-}" ]; then
    return;
  else # directory was changed
    _last_cmd_pwd=$PWD;
    printf "\e]1;%s\a" "$PWD" # set $PWD as tab title
    _possibly_disable_git_prompt
  fi
}

_debug() {
  echo "Stack: ${FUNCNAME[*]:1}"
  echo "Command: $BASH_COMMAND"
}

# Functions to get the time since last prompt
_timer_now() {
  # See https://github.com/jichu4n/bash-command-timer/blob/master/bash_command_timer.sh#L77
  # for a OSX compatible way to do this
  date +%s%N
}

_timer_start() {
  # Do nothing if timer already started
  _timer_start=${_timer_start:-$(_timer_now)}
}

_timer_stop() {
  # Taken from: http://stackoverflow.com/a/34812608/5353461
  # See also: http://jakemccrary.com/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/
  local delta_us=$((($(_timer_now) - _timer_start) / 1000))
  local us=$((delta_us % 1000))
  local ms=$(((delta_us / 1000) % 1000))
  local s=$(((delta_us / 1000000) % 60))
  local m=$(((delta_us / 60000000) % 60))
  local h=$((delta_us / 3600000000))
  # Goal: always show around 3 digits of accuracy
  if ((h > 0)); then _timer_show=${h}h${m}m${s}s
  elif ((m > 0)); then _timer_show=${m}m${s}s
  elif ((s >= 10)); then _timer_show=${s}.$((ms / 100))s
  elif ((s > 0)); then _timer_show=${s}.$(printf %03d $ms)s
  elif ((ms >= 100)); then _timer_show=${ms}ms
  elif ((ms >= 10)); then _timer_show=${ms}.$((us / 100))ms
  elif ((ms > 0)); then _timer_show=${ms}.$(printf %03d $us)ms
  else _timer_show=${us}us
  fi
  # _timer_show+=" ($delta_us)" # Debug
  unset _timer_start
}

# Run before every command (via DEBUG trap)
_pre_command() {
  # echo _pre_command started # Debug
  # When generating the prompt
  if [[ $BASH_COMMAND = "$PROMPT_COMMAND" ]]; then
    :
  fi
  _timer_start
}
trap '_pre_command' DEBUG

# Sets prompt like:
# ravi@boxy:~/prj/sample_app[exit]$         (master*% u=) 4.595ms | Apr 30 22:27
_set_bash_prompt() {
  local exit="$?" # Save the exit status of the last command

   _timer_stop

  # local -- - # Make shell options local to this function, restore on completion
  # set +ex    # Don't debug or die in setting the prompt!'

  # Have we changed directory?
  _cd_hook

  # Create the left-hand side prompt
  local lhs="${debian_chroot:+($debian_chroot)}"

  # Disable unused variables check for unused colours
  # shellcheck disable=SC2034
  # https://github.com/koalaman/shellcheck/issues/145
  if _colour_enabled; then
    export GIT_PS1_SHOWCOLORHINTS=1;

    # Wrap the colour codes between \[ and \], so that
    # bash counts the correct number of characters for line wrapping:
    local Red='\[\e[0;31m\]'; local BRed='\[\e[1;31m\]'
    local Gre='\[\e[0;32m\]'; local BGre='\[\e[1;32m\]'
    local Yel='\[\e[0;33m\]'; local BYel='\[\e[1;33m\]'
    local Blu='\[\e[0;34m\]'; local BBlu='\[\e[1;34m\]'
    local Mag='\[\e[0;35m\]'; local BMag='\[\e[1;35m\]'
    local Cya='\[\e[0;36m\]'; local BCya='\[\e[1;36m\]'
    local Whi='\[\e[0;37m\]'; local BWhi='\[\e[1;37m\]'
    local None='\[\e[0m\]' # Return to default colour
  else # No colour
    unset GIT_PS1_SHOWCOLORHINTS
    # Don't die if set -u
    local Red BRed Gre BGre Yel BYel Blu BBlu Mag BMag Cya BCya Whi BWhi None
  fi

  # No username and bright colour if root
  if [[ ${EUID} = 0 ]]; then
    lhs+="$BRed\h "
  else
    lhs+="$BGre\u@\h$None:"
  fi

  # Working directory
  lhs+="$BBlu\w$None"

  # Highlight non-standard exit codes
  if [[ $exit != 0 ]]; then
    lhs+="$Red[$exit]"
  fi

  # Change colour of final character if root
  if [[ ${EUID} == 0 ]]; then
    lhs+="$BRed"'\$ '"$None"
  else
    lhs+="$Yel"'\$ '"$None"
  fi

  #
  # Git status
  #

  # Save current state of user shopt settings promptvars and extglob
  local user_shopt
  user_shopt=$(shopt -p promptvars extglob)
  # __git_ps1 usually returns literal text "${__git_ps1_branch_name}" rather
  # than the contained branch name, eg "master". This prevents calculating
  # the length of the printable characers in the RHS string (used to move the
  # cursor that many columns left from the terminal's right edge.) However if
  # "shopt promptvars" is unset, __git_ps1 it will include the dereferenced
  # branch name instead.
  shopt -qu promptvars
  # extglob is required for the ${variable//@(pattern)/} replacements
  shopt -qs extglob

  # Allow disabling git status and no error if __git_ps1 undefined
  if [[ ! -v _disable_git_prompt && $(type -t __git_ps1 2>/dev/null) == function ]]; then
    # __git_ps1 will only make pretty colours inside $PS1
    local old_PS1=$PS1
    __git_ps1 "" "" "%s" # force colour; no default round bracket (decorations)

    # Strip "\[" and "\[": non-printable character markers. __git_ps1 outputs
    # them however the whole of the RHS prompt needs to be included in these
    # markers, and they can't be nested.
    git=${PS1//@(\\@(\[|\]))/}
    PS1=$old_PS1
  fi

  #
  # Right hand side of prompt
  #
  local rhs="" # String to be printed on the right hand side of terminal

  # Create a string like: "25 Apr 13:15"
  local date_time
  printf -v date_time "%(%e %b %H:%M)T" -1 # -1 is current time

  # Format the RHS prompt
  [[ -n $git ]] && rhs="$git | " #"
  rhs+="${_timer_show} | ${BCya}${date_time}"

  # Strip ANSI CSI commands (eg colours) to enble counting the length of
  # printable characters, giving offset of cursor from terminal RHS edge (from
  # https://www.commandlinefu.com/commands/view/12043/remove-color-special-escape-ansi-codes-from-text-with-sed)
  # Neither bash not sed support lookbehind zero-length assertions, so it's not
  # possible to ignore "\\e", (ie a literal '\' followed by a literal 'e'), yet
  # still remove "\e" (ie ESC)
  local rhs_printable=${rhs//@(\\@(\[|]|[Ee]\[*([0-9;])[a-zA-Z]))/}
  # or, in using sed (but requires exec):
  # local rhs_printable=$(sed -e 's,\\[][]\|\\[Ee]\[\([0-9;]\)*[A-Za-z],,g' <<< "$rhs")

  # Reference: https://en.wikipedia.org/wiki/ANSI_escape_code
  local Save='\e[s' # Save cursor position
  local Rest='\e[u' # Restore cursor to save point

  # Save cursor position, jump to (right hand edge minus N columns) where N is
  # the length of the printable RHS string. Print the RHS string, then return
  # to the saved position and print the LHS prompt.

  # Note: "\[" and "\]" are used so that bash can calculate the number of
  # printed characters so that the prompt doesn't do strange things when
  # command line editing/browsing/completion

  # The colour variables already include these so they can't be used inside the
  # explicit "\[" and "\]" because of nesting issues.
  PS1="\[\e[0m${Save}\e[$((COLUMNS - ${#rhs_printable}))G${rhs}${Rest}\]${lhs}"
  # If $COLUMNS happens to be unset (some cygwin, OSX)
  # PS1="${lhs}${Blu}\[${Save}\e[$(($(tput cols) - ${#rhs_printable}))G${rhs}${Rest}\]${PS1}"

  eval "$user_shopt"
  # echo "\$PS1=$PS1" # Debug
}

# eval "$_options"; unset _options # Restore previous shell options from line 2

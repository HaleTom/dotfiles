#!/bin/bash
# _options=$(shopt -op); set -exu # save and set shell options for testing

##################
# Set the prompt #   Sourced from .bashrc
##################

# Generate *+%$ decorations very cleanly:
# https://github.com/mathiasbynens/dotfiles
# Or see https://github.com/magicmonty/bash-git-prompt (not used here)

# Bash:
# trap fn DEBUG        # calls fn before each command
# PROMPT_COMMAND=fn    # calls the function after each command (generate next prompt)
# Note: that the function defined in PROMPT_COMMAND is run before each prompt, even empty ones.

# set variable identifying the chroot you work in (used in the prompt below)
if [[ -z "${debian_chroot:-}" && -r /etc/debian_chroot ]]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# Select git info displayed, see /usr/share/git/git-prompt.sh for more
export GIT_PS1_SHOWDIRTYSTATE=1           # '*'=unstaged, '+'=staged
export GIT_PS1_SHOWSTASHSTATE=1           # '$'=stashed
export GIT_PS1_SHOWUNTRACKEDFILES=1       # '%'=untracked
export GIT_PS1_SHOWUPSTREAM="verbose"     # 'u='=no difference, 'u+1'=ahead by 1 commit
export GIT_PS1_STATESEPARATOR=''          # No space between branch and index status
export GIT_PS1_DESCRIBE_STYLE="describe"  # detached HEAD style:
#  describe      relative to older annotated tag (v1.6.3.1-13-gdd42c2f)
#  contains      relative to newer annotated tag (v1.6.3.2~35)
#  branch        relative to newer tag or branch (master~4)
#  default       exactly eatching tag


#
# Git status string
#
_git_status_gen() {

  _git_status=''  # Global variable

  if [[ $BASH_VERSION ]]; then
    # Save current state of user shopt settings promptvars and extglob
    local user_shopt
    user_shopt=$(shopt -p promptvars extglob)

    # __git_ps1 usually returns literal text "${__git_ps1_branch_name}" rather
    # than the contained branch name, eg "master". This prevents calculating
    # the length of the printable characers in the RHS string (used to move the
    # cursor that many columns left from the terminal's right edge.) However if
    # "shopt promptvars" is unset, __git_ps1 it will include the dereferenced
    # branch name instead.
    shopt -qu promptvars
    # extglob is required for the ${variable//@(pattern)/} replacements
    shopt -qs extglob
  fi

  # zsh: If $_git_status contains ${__git_ps1_branch_name} it will not be
  # recursively expanded. Force literal text to be produced by __git_ps1.
  [[ -n $ZSH_VERSION ]] && setopt local_options no_prompt_subst

  # Allow disabling git status. Avoid error if __git_ps1 undefined.
  # $__git_printf_supports_v is set if git-prompt.sh is sourced
  # shellcheck disable=2154  # $__git_printf_supports_v unset
  if [[ -z ${_disable_git_string+x} && ! -z ${__git_printf_supports_v+x} ]]; then
    local PS1  # __git_ps1 will overwrite it

    # __git_ps1 will only generate colour commands inside $PS1
    # Force colour.  Also no default round bracket (decorations) with just %s
    __git_ps1 "" "" "%s" 2> /dev/null  # STDERR EPERM can interrupt the prompt
    _git_status=${PS1}

    if [[ $_git_status != '' ]]; then
      if [[ -n $ZSH_VERSION ]]; then
        _git_status=" (%B${_git_status}%b)"  # Avoid glitching
      else
        local bold='\[\e[1m\]'
        local reset='\[\e[0m\]'
        _git_status="${reset} (${bold}${_git_status}${reset})"
      fi
    fi

    if [[ $BASH_VERSION && $1 == RHS ]]; then
      # We're generating for a RHS prompt. Work-around is needed for bash only.
      # Strip "\[" and "\[": non-printable character markers. __git_ps1 outputs
      # them however the whole of the RHS prompt needs to be included in these
      # markers, and they can't be nested.
      _git_status=${_git_status//@(\\@(\[|\]))/}
    fi
  fi

  # Restore saved shell options. Zsh sets them local only
  if [[ $BASH_VERSION ]]; then eval "$user_shopt"; fi
}


# Allow user to set a simple prompt for capturing sample output
# by setting variable $ps1 (not $PS1)
_simple_prompt_bash() {
  # Determine whether to restore readline show-mode-in-prompt
  if [[ ! -z ${_restore_mode_in_prompt+x} ]]; then  # First time generating a simple prompt
    if bind -v | grep "show-mode-in-prompt on" &>/dev/null; then
      _restore_mode_in_prompt=1
    else
      _restore_mode_in_prompt=0
    fi
  fi

  # shellcheck disable=2154  # $ps1 unset
  case $ps1 in
    [Xx]) # Cancel simple prompt behaviour
      (( _restore_mode_in_prompt )) && bind "set show-mode-in-prompt on"
      unset -v ps1 _restore_mode_in_prompt
      _prompt_bash_set # Print the full prompt
      ;; # Don't fall through 'here
    "") # Set default simple prompt allowing for user laziness of `ps1=`
      PS1='\$ ' ;;
    *) # User has set explicit prompt string
      bind "set show-mode-in-prompt off"
      PS1=${ps1} ;;
  esac
}


# Commands inside the git prompt make sshfs prompts slooooow.
# By filesystem:  https://unix.stackexchange.com/questions/72223/check-if-folder-is-a-mounted-remote-filesystem
_maybe_disable_git_string() {
  # echo "Running possibly_disable_git_string()"
  unset -v _disable_git_string # default git section of prompt emabled
  case $PWD in  # ;& is fall-through
    /ssh/*) ;&
    # /other/directory*) ;&
    disable) # Won't match itself as all paths start with /   #' < Syntastic bug
      # echo "Set _disable_git_string=true"
      _disable_git_string=true # existance matters, value is irrelevant
  esac
}

# Things to do if working directory has changed
_cd_hook() {
  # printf '\e]1;%s\a' "$PWD" # set $PWD as tab title  # XXX doesn't seem to be working
  _maybe_disable_git_string
  # Change slash colour in prompt directory
  if [[ $ZSH_VERSION ]]; then _prompt_update_zsh; fi
}


# Functions to get the time since last prompt
_timer_now() {
  # See https://github.com/jichu4n/bash-command-timer/blob/master/bash_command_timer.sh#L77
  # for a OSX compatible way to do this
  date +%s%N
  # TODO zsh without subprocess: https://unix.stackexchange.com/a/204807/143394
}


_prompt_timer_start() {
  # Do nothing if timer already started
  _prompt_timer_start=${_prompt_timer_start:-$(_timer_now)}
}


_prompt_timer_stop() {
  # Taken from: http://stackoverflow.com/a/34812608/5353461
  # See also: http://jakemccrary.com/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/
  local delta_us=$((($(_timer_now) - _prompt_timer_start) / 1000))
  local us=$((delta_us % 1000))
  local ms=$(((delta_us / 1000) % 1000))
  local s=$(((delta_us / 1000000) % 60))
  local m=$(((delta_us / 60000000) % 60))
  local h=$((delta_us / 3600000000))
  # Goal: always show around 3 digits of accuracy
  if ((h > 0)); then _timer_show=${h}h${m}m${s}s
  elif ((m > 0)); then _timer_show=${m}m${s}s
  elif ((s >= 10)); then _timer_show=${s}.$((ms / 100))s
  elif ((s > 0)); then _timer_show=${s}.$(printf %03d $ms)s
  elif ((ms >= 100)); then _timer_show=${ms}ms
  elif ((ms >= 10)); then _timer_show=${ms}.$((us / 100))ms
  elif ((ms > 0)); then _timer_show=${ms}.$(printf %03d $us)ms
  else _timer_show=${us}us
  fi
  # _timer_show+=" ($delta_us)" # Debug
  unset -v _prompt_timer_start
}

_prompt_pwd_generate() {
  local prefix=''  # Used to contain '~' if $PWD directory is under $HOME
  local dir=$PWD

  # Replace leading $HOME with ~ if at beginning of string
  case "$PWD"/ in # Extra slash at end prevents substring match
    "$HOME"/)  # $PWD == $HOME itself
      echo '~'
      return ;;
    "$HOME"/?*)  # $PWD is a subdir of $HOME
      prefix=\~/  # Trailing / ensures possibly quoted string goes after ~/ for validity
      dir=${PWD#$HOME/} ;;   # Remove $HOME and / as this is now in $prefix
  esac

  # Quote directory minus $HOME
  if [[ -n $ZSH_VERSION ]]; then
    # Use printable characters from ${(q+)variable} as (q-) gives literal whitespace
    # Fall back to printf '%q' if ${(q+)variable} is not supported
    eval 'dir="${(q+)dir}"' 2> /dev/null || printf -v dir '%q' "$dir"
    dir=${dir//'%'/'%%'}  # Replace % with %%
  else  # $BASH_VERSION
    eval 'dir=${dir@Q}' 2> /dev/null || printf -v dir '%q' "$dir"  # Quote directory minus $HOME
    # if [[ -z $dir_Q ]]; then  # Pick shorter of the two output strings
    #   dir=$dir_printf
    # else
    #   dir_Q=${dir_Q//$'\n'/\\n}  # replace literal \n with quoted version
    #   if [[ ${#dir_Q} -le ${#dir_printf} ]]; then
    #     echo using '${var@Q}' >&2
    #     dir=$dir_Q
    #     echo using 'printf "%q"' >&2
    #     dir=$dir_printf
    #   else
    #     echo using 'printf "%q"' >&2
    #     dir=$dir_printf
    #   fi
    # fi
  fi

  # Replace a single slash with 4!?! slashes
  # https://unix.stackexchange.com/q/543473/143394
  dir=${dir//\\/\\\\\\\\}

  # Prevent command and variable substitution:
  dir=${dir//\`/\\\`}  # escape ` as \`
  dir=${dir//\$/\\\$}  # escape $ as \$

  echo "${prefix}${dir}"
}

##
## End zsh-only functions
##
[[ $ZSH_VERSION ]] && return


# Check if we support colours
_colour_enabled() {
  local -i colors
  colors=$(tput colors 2>/dev/null)  # TODO cache this
  [[ $? && $colors -gt 2 ]]
}

# Has directory changed?
_cd_hook_bash() {
  # echo "Running _cd_hook()"
  if [ "$PWD" == "${_last_cmd_pwd-}" ]; then
    return;
  else # directory was changed
    _last_cmd_pwd=$PWD;
    _cd_hook
  fi
}


# Run before every command (via DEBUG trap)
_pre_command() {
  # echo _pre_command started # Debug

  # Run only when generating the prompt
  # if [[ $BASH_COMMAND = "$PROMPT_COMMAND" ]]; then
  #   :
  # fi

  _prompt_timer_start
}
trap '_pre_command' DEBUG


# Sets prompt like:
# ravi@boxy:~/prj/sample_app master*% u= [exit]$        (venv=name) 4.595ms | Apr 30 22:27
_prompt_bash_set() {
  local exit="$?" # Save the exit status of the last command

  # Allow user to set $ps1_debug to have "set -xe" continue through the prompt
  # shellcheck disable=SC2154
  if [[ -z ${ps1_debug+x} ]]; then
    # Doesn't work on bash prior to v4.4:
    # local -- - # Make shell options local to this function, restore on completion
    [[ $- = *e* ]] && local set_e=1
    [[ $- = *x* ]] && local set_x=1
    set +ex    # Don\'t debug or die in setting the prompt!
  fi
  _prompt_timer_stop

  # Allow for a simple prompt for copy / paste examples
  # shellcheck disable=2154,2236  # Safe check for set variable
  [[ ! -z ${ps1+x} ]] && { _simple_prompt_bash; return 0; }

  # Have we changed directory?
  _cd_hook_bash

  # Disable unused variables check for unused colours
  # shellcheck disable=SC2034
  # https://github.com/koalaman/shellcheck/issues/145
  if _colour_enabled; then
    export GIT_PS1_SHOWCOLORHINTS=1;

    # Wrap the colour codes between \[ and \], so that
    # bash counts the correct number of characters for line wrapping:
    local Bla='\[\e[0;30m\]'; local BBla='\[\e[1;30m\]'
    local Red='\[\e[0;31m\]'; local BRed='\[\e[1;31m\]'
    local Gre='\[\e[0;32m\]'; local BGre='\[\e[1;32m\]'
    local Yel='\[\e[0;33m\]'; local BYel='\[\e[1;33m\]'
    local Blu='\[\e[0;34m\]'; local BBlu='\[\e[1;34m\]'
    local Mag='\[\e[0;35m\]'; local BMag='\[\e[1;35m\]'
    local Cya='\[\e[0;36m\]'; local BCya='\[\e[1;36m\]'
    local Whi='\[\e[0;37m\]'; local BWhi='\[\e[1;37m\]'
    local None='\[\e[0m\]' # Return to default colour
  else # No colour
    unset GIT_PS1_SHOWCOLORHINTS
    # Don't die if set -u
    local Bla BBla Red BRed Gre BGre Yel BYel Blu BBlu Mag BMag Cya BCya Whi BWhi None
  fi

  # Create the left-hand side prompt
  local lhs="${debian_chroot:+($debian_chroot)}"

  # Red username@ if root
  if [[ ${EUID} = 0 ]]; then
    lhs+="${BRed}\\u@"
  else
    lhs+="${BWhi}\\u${BBla}@"
  fi

  # Hostname:
  host="$(candify "$HOSTNAME" | readline_ANSI_escape || echo "$HOSTNAME")"
  lhs+="${host}${None}:"

  # Colour slashes in the directory  https://superuser.com/q/49092/365890
  local dir_colour=$BCya  # colour of non-/ characters
  local slash_colour=$BYel
  local root_colour=$Red

  dir=$(_prompt_pwd_generate) || dir='\w'
  dir=${dir_colour}${dir}  # Initially coloured quoted $PWD

  [[ $EUID = 0 ]] && slash_colour=$root_colour
  dir=${dir//\//${slash_colour}/${dir_colour}}  # Replace / with coloured /

  lhs+=${dir}

  # Allow disabling the above directory quoting by setting the following variable
  # shellcheck disable=2154,2236  # Safe check for set variable
  if [ ! -z "${_bash_prompt_simple+x}" ]; then
    # PS1='\u@\h:'$dir'\$ '; return
    lhs='\u@\h:\w'
  fi

  # Git status
  _git_status_gen LHS  # Generate git status for a LHS prompt string
  lhs+="${_git_status}"
  # TODO only create the prompt once per directory change, and include expand $_git_status via shell options

  # Highlight non-standard exit codes
  if [[ $exit != 0 ]]; then
    lhs+=" ${BWhi}[${Red}${exit}${BWhi}]"
  fi

  # Change colour of final character if root
  if [[ ${EUID} == 0 ]]; then
    lhs+="$BRed"'\$ '"$None"
  else
    lhs+="$BYel"'\$ '"$None"
  fi

  #
  # Right hand side of prompt
  #

  # Note: Don't use the colour variables (eg $BRed) defined above as they
  # include zero-length escaping of the ANSI codes.  Use unescaped codes as the
  # whole RHS will be included in \[ and \], and these do not nest.

  local rhs="" # String to be printed on the right hand side of terminal
  local date_time virtualenv

  # Create a string like: "25 Apr 13:15"
  printf -v date_time "%(%e %b %H:%M)T" -1 # -1 is current time

  # Format the RHS prompt
  # [[ -n $git_status ]] && rhs="$git_status | " #"
  rhs+="${_timer_show} | \\e[0;0;36m${date_time}"

  # Prepend python virtualenv if applicable
  local virtualenv
  virtualenv=${VIRTUAL_ENV##*/}  # basename of environment directory
  [[ -n  $virtualenv ]] && rhs="(venv=${virtualenv}) $rhs"

  # Strip ANSI CSI commands (eg colours) to enble counting the length of
  # printable characters, giving offset of cursor from terminal RHS edge (from
  # https://www.commandlinefu.com/commands/view/12043/remove-color-special-escape-ansi-codes-from-text-with-sed)
  # Neither bash not sed support lookbehind zero-length assertions, so it's not
  # possible to ignore "\\e", (ie a literal '\' followed by a literal 'e'), yet
  # still remove "\e" (ie ESC)
  local rhs_printable=${rhs//@(\\@(\[|\]|[Ee]\[*([0-9;])[a-zA-Z]))/}
  # or, in using sed (but requires exec):
  # local rhs_printable=$(sed -e 's,\\[][]\|\\[Ee]\[\([0-9;]\)*[A-Za-z],,g' <<< "$rhs")

  # Reference: https://en.wikipedia.org/wiki/ANSI_escape_code
  local Save='\e[s' # Save cursor position
  local Restore='\e[u' # Restore cursor to save point

  # Save cursor position, jump (\e#G) to (right hand edge minus N columns)
  # where N is the length of the printable RHS string. Print the RHS string,
  # then return to the saved position and print the LHS prompt.

  # Note: "\[" and "\]" are used so that bash can calculate the number of
  # printed characters so that the prompt doesn't do strange things when
  # command line editing/browsing/completion

  # The colour variables already include these so they can't be used inside the
  # explicit "\[" and "\]" because of nesting issues.

  # Edge case TODO: Don't print more RHS characters than will fit on one line:
  # http://stackoverflow.com/a/43744552/5353461

  local columns
  if [[ -n $COLUMNS ]]; then
    columns=$COLUMNS
  else
    columns=$(tput cols)
  fi

  # TODO: Use readline_ANSI_escape() to escape all non-printables only once.

  PS1='\['${Save}'\e['$((columns - ${#rhs_printable}))G${rhs}${Restore}'\]'${lhs}

  [[ $set_e ]] && set -e
  [[ $set_x ]] && set -x

  # echo "\$PS1=$PS1" # Debug
}


# eval "$_options"; unset _options # Restore previous shell options from line 2

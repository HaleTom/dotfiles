#!/bin/bash
# shellcheck disable=1090
# ^ don't try to check variable-named sourced files
# ^ keep shell-check happy

# XDG - set defaults as they may not be set (eg Ubuntu 14.04 LTS)
# See https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables
# and https://wiki.archlinux.org/index.php/XDG_Base_Directory_support
export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:=$HOME/.config}
export XDG_DATA_HOME=${XDG_DATA_HOME:=$HOME/.local/share}
export XDG_CACHE_HOME=${XDG_CACHE_HOME:=$HOME/.cache}
export XDG_STATE_HOME=${XDG_STATE_HOME:=$HOME/.local/state}

# Create directories if needed
for var in XDG_CONFIG_HOME XDG_DATA_HOME XDG_STATE_HOME XDG_CACHE_HOME; do
  sh_is_bash && dir=${!var}
  sh_is_zsh  && dir=${(P)var}
  if [ ! -d "${dir}" ]; then
    printf "Creating $%s directory: %s\n" "$var" "${dir}"
    mkdir -p "${dir}"
  fi
done

export XDG_CONFIG_DIRS=${XDG_CONFIG_DIRS:=/etc/xdg}
export XDG_DATA_DIRS=${XDG_DATA_DIRS:=/usr/local/share:/usr/share}

# $XDG_RUNTIME_DIR
# https://unix.stackexchange.com/a/580757/143394  # My Q&A
if [ -z "$XDG_RUNTIME_DIR" ]; then  # It's not already set
  XDG_RUNTIME_DIR=/run/user/$UID  # Try systemd created path
  if [ ! -d "$XDG_RUNTIME_DIR" ]; then
    # systemd-created directory doesn't exist
    XDG_RUNTIME_DIR=/tmp/$USER-runtime
    [ ! -d "$XDG_RUNTIME_DIR" ] && mkdir -m 0700 "$XDG_RUNTIME_DIR"
  fi
fi

_get_octal_perms() {
  if [[ $OSTYPE == darwin* ]]; then
    stat -f %A "$@"
  else
    stat -c %a "$@"
  fi
}

# Check dir has got the correct type, ownership, and permissions
if ! [[ -d "$XDG_RUNTIME_DIR" && -O "$XDG_RUNTIME_DIR" &&
  $(_get_octal_perms "$XDG_RUNTIME_DIR") == 700 ]]; then
  echo "\$XDG_RUNTIME_DIR: permissions problem with $XDG_RUNTIME_DIR:" >&2
  ls -ld "$XDG_RUNTIME_DIR" >&2
  XDG_RUNTIME_DIR=$(mktemp -d /tmp/"$USER"-runtime-XXXXXX)
  echo "Set \$XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR" >&2
fi
export XDG_RUNTIME_DIR
unset -f _get_octal_perms

# Export the XDG user directories
if [[ -f $XDG_CONFIG_HOME/user-dirs.dirs ]]; then
    . "$XDG_CONFIG_HOME/user-dirs.dirs"
    export XDG_DESKTOP_DIR XDG_DOWNLOAD_DIR XDG_TEMPLATES_DIR XDG_PUBLICSHARE_DIR XDG_DOCUMENTS_DIR XDG_MUSIC_DIR XDG_PICTURES_DIR XDG_VIDEOS_DIR
fi


# Tell programs to look for files in $XDG_* directories
# When adding a file here, ensure its $HOME/.* location is added
# to the XDGFILES "here" string below


# Single-line config
export INPUTRC=$XDG_CONFIG_HOME/readline/inputrc
export GNUPGHOME=$XDG_CONFIG_HOME/gnupg
export MOST_INITFILE=$XDG_CONFIG_HOME/most/config
export WGETRC=$XDG_CONFIG_HOME/wgetrc
export PARALLEL_HOME=$XDG_CONFIG_HOME/parallel

#
# Begin multi-line config
#

export LESSKEY=$XDG_CONFIG_HOME/less/keys
export LESSHISTFILE=$XDG_CACHE_HOME/less/history

export VIMPERATOR_INIT=":source $XDG_CONFIG_HOME/vimperator/vimperatorrc"
export VIMPERATOR_RUNTIME=$XDG_CONFIG_HOME/vimperator

# Ruby
export GEM_HOME=$XDG_DATA_HOME/gem GEM_SPEC_CACHE=$XDG_CACHE_HOME/gem
export BUNDLE_USER_CONFIG=$XDG_CONFIG_HOME/bundle
export BUNDLE_USER_CACHE=$XDG_CACHE_HOME/bundle
export BUNDLE_USER_PLUGIN=$XDG_DATA_HOME/bundle

# Rust
export RUSTUP_HOME="$XDG_DATA_HOME"/rustup
export CARGO_HOME="$XDG_DATA_HOME"/cargo

# Node.js / nvm / npm
# Check config with:   npm config ls -l | grep / | grep -v '^;'
# More XDG config is inside the config file itself:
export NODE_REPL_HISTORY=$XDG_DATA_HOME/node_repl_history
export NPM_CONFIG_USERCONFIG=$XDG_CONFIG_HOME/npm/npmrc
# Ensure that the NVM_DIR does not contain a trailing slash
export NVM_DIR=$XDG_DATA_HOME/nvm
# export NPM_CONFIG_PREFIX=${XDG_DATA_HOME}/npm  # nvm removes from npmrc and complains at shell startup
# This seems to get unset, setting in /home/ravi/.config/npm/npmrc instead:
# export NPM_CONFIG_PREFIX=$XDG_DATA_HOME/npm

# # Uncommenting breaks Manjaro login
# X11
# export XAUTHORITY="$XDG_CACHE_HOME/Xauthority"
# mkdir -p "$XDG_RUNTIME_DIR/X11"
# export ICEAUTHORITY="$XDG_RUNTIME_DIR/X11/ICEauthority"
# export XAUTHORITY="$XDG_RUNTIME_DIR/X11/Xauthority"

# vim - Set vimrc and viminfo location before vim startup
# shellcheck disable=2016
export VIMINIT='let $MYVIMRC="'"$XDG_CONFIG_HOME"'/vim/vimrc"|source $MYVIMRC'

# A function so that it can be run in the background immediately after declaration
function check_shadowed_files {
  # Only warn that symlinks are shadowed on the odd occasion
  # Set XDG_CHECK=1 to force the check
  if ((RANDOM % 100 == 0)) || [[ $XDG_CHECK ]]; then
    echo "Running random spot check of XDG shadowed symlinks"
    local print_symlinks=true
  fi

  # Check that only one version of files exist
  # Ignore the file if it is a symlink, unless print_symlinks is set
  while read -r file; do # HERE doc at end
    case "$file" in
      "") ;&
      \#*) continue # Allow for blank and commened out files
    esac
    if [[ -e $file ]]; then { # bracket for STDERR
      [[ -L $file && -z ${print_symlinks-} ]] && continue
      printf "%s" "Warning: XDG shadowed "
      # shellcheck disable=SC2015 # A && B || C is not if-then-else. C may run when A is true. [SC2015]
        [[ -L $file ]] && printf "symlink" || { # symlinks are "both"
          [[ -d $file ]] && printf "directory"
          [[ -f $file ]] && printf "file";
        }
        printf ': %s\n' "$file"
      } >&2
    fi
  done <<XDGFILES
    $HOME/.gitconfig
    $HOME/.gnupg
    $HOME/.histfile
    $HOME/.inputrc
    $HOME/.less
    $HOME/.lesshst
    $HOME/.mostrc
    $HOME/.npm
    $HOME/.npmrc
    $HOME/.npm-init.js
    $HOME/.parallel
    $HOME/.tmux
    $HOME/.tmuxinator
    $HOME/.vim
    $HOME/.viminfo
    $HOME/.vimperator
    $HOME/.wgetrc
    $HOME/.nvm
    # X/ICEauth don't listen currently, silence them...
    # $HOME/.Xauthority
    # $HOME/.ICEauthority
XDGFILES
}

silent_background check_shadowed_files

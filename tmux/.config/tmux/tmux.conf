# https://manned.org/tmux

# Option setting options
# https://manned.org/tmux.1#:~:text=Commands%20which%20set%20options%20are%20as%20follows

# Styles / colours
# https://manned.org/tmux.1#:~:text=tmux%20offers%20various%20options%20to%20specify%20the%20colour%20and%20attributes%20of%20aspects

# Killer tmux config: https://github.com/gpakosz/.tmux
# vi-like copy/paste: https://leanside.com/2014/01/copy-paste-in-tmux/

# Various to file later on
set-option -g status-keys vi
set-option -g history-limit 8192

# Use ` key for tmux prefix
set -g prefix `
set -g prefix2 C-b # so it works as expected for others
bind `   send-prefix
bind b send-prefix -2  # ^B^B switches to last used window

# Be able to turn off ` as prefix
# cat says that Ctrl-` produces ^@ ... let's run with it...
# Disable ` as prefix:
bind C-M-b set -g prefix C-b \; display "Prefix ` disabled. Use <prefix> C-` to restore"
# Restore ` as prefix:
bind C-@ set -g prefix ` \; display "Prefix set to `.  Use <prefix> C-M-b to disable."

# Enable locking
set -g lock-command vlock
set -g lock-after-time 0 # Seconds; 0 = never
bind L lock-client
# bind L lock-session

# If needing to type a lot of backticks: In .tmux.conf I also have
# bind-key C-a set-option -g prefix C-a. Whenever I need to use
# backticks I hit `-Ctrl-a which sets my prefix to C-a. And I have
# bind-key C-b set-option -g prefix ` so I can hit C-a-C-b to go back

# Easily switch between windows
bind-key C-b last-window

# open %% man page
bind C-m command-prompt -p "Open man page for:" "new-window 'exec man %%'"

# quick view of processes
bind '~' split-window "exec sh -c htop || top"

# set vi keys
setw -g mode-keys vi

# Escape is next to '`' - easy entry to copy mode:
bind Escape copy-mode

# Prevent X clipboard setting garbage in some terminals after mouse copy
set -g set-clipboard off

#
# $TERM - Terminal setup
#
# Save the $TERM that tmux is running inside
if '[ -z $TMUX_TERM ]' 'setenv -g TMUX_TERM $TERM'
run 'tmux set default-terminal $(tmux-print-default-terminal)'

# Enable RGB colour
# -a appends rather than overrides
# terminal-overrides applies to the TERM *outside* tmux not inside. Include virtual ones to enable nesting
set -ga terminal-overrides ",xterm*-256color*:Tc,rxvt*-256color*:Tc,screen-256color:Tc,tmux-256color:Tc"

# Set terminal features
# https://man7.org/linux/man-pages/man1/tmux.1.html#:~:text=terminal%2Dfeatures%5B%5D%20string
# OSC 8 hyperlinks require version next-3.4 or greater:  https://github.com/tmux/tmux/issues/3660
set -ga terminal-features ",*:hyperlinks"

# Sane scrolling
set -ga terminal-overrides ',xterm*:smcup@:rmcup@'

# Allow programs in the pane to bypass tmux using a terminal escape sequence (\ePtmux;...\e\\).
# Used for setting wezterm title from shell
set -g allow-passthrough on

# Terminfo extensions
# Overline
set -as terminal-overrides ',*:Smol=\E[53m'
# Styled underscore (eg undercurl, double, dotted, dashed)
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'
# Underscore colour
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

# Alacritty https://gist.github.com/joshuarli/247018f8617e6715e1e0b5fd2d39bb6c#rgb-colors
# Undercurl and colours not supported at 2022-01-13: https://github.com/alacritty/alacritty/issues/1628
set -as terminal-overrides ",alacritty:RGB"

# Remove symbols after window names
# set -g window-status-format "#I:#W"
# set -g window-status-current-format "#I:#W"

# Set environment NEEDED???
# set -g update-environment "DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY"

# Available colours:
# default, black, red, green, yellow, blue, magenta, cyan, white
# colour0 to colour255 from the 256-colour palette

# Colours
set -g clock-mode-colour red
set -g clock-mode-style 24

# Default statusbar colors
set -g status-fg white
set -g status-bg default

set -g display-panes-colour brightyellow
set -g display-panes-active-colour brightred
set -g pane-active-border-style bg=blue
set -g window-status-current-style "bg=red fg=brightwhite"

# don't rename windows automatically when manually giving names using
# <leader> ,
# set-option -g allow-rename off

# Automatically set window title
set-window-option -g automatic-rename on
set-option -g set-titles on

# Index starting from 1 as '0' key is a bit of a stretch
set -g base-index 1
# required by tmuxinator if base-index is set
set-window-option -g pane-base-index 1

# Version-specific commands [grumble, grumble]
# See: https://github.com/tmux/tmux/blob/master/CHANGES
run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | \
                                sed -En "s/^tmux[^0-9]*([.0-9]+).*/\1/p")'

if-shell -b '[ "$(echo "$TMUX_VERSION < 2.1" | bc)" = 1 ]' " \
    set -g mouse-select-pane on; set -g mode-mouse on; \
    set -g mouse-resize-pane on; set -g mouse-select-window on; \
    set -g message-fg red; \
    set -g message-bg black; \
    set -g message-attr bright; \
    set -g window-status-bg default; \
    set -g window-status-fg default; \
    set -g window-status-current-attr bold; \
    set -g window-status-current-bg cyan; \
    set -g window-status-current-fg default; \
    set -g window-status-bell-fg red; \
    set -g window-status-bell-bg black; \
    set -g window-status-activity-fg white; \
    set -g window-status-activity-bg black"

# In version 2.1 "mouse" replaced the previous 4 mouse options
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1 ]' \
  "set -g mouse on"

# UTF8 is autodetected in 2.2 onwards, but errors if explicitly set
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.2" | bc)" = 1 ]' \
  "set -g utf8 on; set -g status-utf8 on; set -g mouse-utf8 on"

# bind-key syntax changed in 2.4 -- selection / copy / paste
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' " \
   bind-key -t vi-copy v   begin-selection; \
   bind-key -t vi-copy V   send -X select-line; \
   bind-key -t vi-copy C-v rectangle-toggle; \
   bind-key -t vi-copy y   copy-pipe 'xclip -selection clipboard -in'"

# Newer versions
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' " \
   bind-key -T copy-mode-vi v   send -X begin-selection; \
   bind-key -T copy-mode-vi V   send -X select-line; \
   bind-key -T copy-mode-vi C-v send -X rectangle-toggle; \
   bind-key -T copy-mode-vi y   send -X copy-pipe-and-cancel 'xclip -selection clipboard -in'"

if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.9" | bc)" = 1 ]' \
   "set -g message-style fg=red,bg=black; \
    set -g message-style bright; \
    set -g status-style                 fg=white,bg=black; \
    set -g window-status-style          fg=brightwhite,bg=brightblack; \
    set -g window-status-current-style  fg=brightwhite,bold,bg=brightblue; \
    set -g window-status-bell-style     fg=red,bg=black; \
    set -g window-status-activity-style fg=brightgreen,bold,bg=brightblack"

# Copy / Paste
bind ] paste-buffer -p  # -p = be bracketed paste mode aware

# TODO: check that this config actually goes live..  -p (bracketed paste) appear in help?
bind-key    -T copy-mode    Y                 send-keys -X copy-pipe-and-cancel "tmux paste-buffer -p"
bind-key    -T copy-mode    M-y               send-keys -X copy-pipe-and-cancel "xclip -selection clipboard; tmux paste-buffer -p"
bind-key    -T copy-mode-vi Y                 send-keys -X copy-pipe-and-cancel "tmux paste-buffer -p"
bind-key    -T copy-mode-vi M-y               send-keys -X copy-pipe-and-cancel "xclip -selection clipboard; tmux paste-buffer -p"
bind-key    -T prefix       C-p               run-shell "xclip -o | tmux load-buffer - ; tmux paste-buffer -p"

# Put / get tmux buffer to / from X
# https://unix.stackexchange.com/a/409972/143394
# xclip -r removes last new line.  >/dev/null ensures tmux doesn't become unresponsive to shortcuts
# Use run-shell so as to be backward compatible
bind-key C-Y run-shell "tmux save-buffer - | xclip -i -selection clipboard > /dev/null" \; display-message "Copied tmux buffer to clipboard"
# bind-key C-Y run-shell "tmux save-buffer - | xclip -i > /dev/null" \; display-message "Copied tmux buffer to selection"
bind-key C-p run-shell "xclip -o | tmux load-buffer - ; tmux paste-buffer -p"

# Allow easy copy/paste
# use z to zoom/unzoom a pane
# toggle mouse mode to allow mouse copy/paste

# Not needed with tmux-yank plugin (tmux v1.9+)
# # set mouse ON with prefix m
# bind m \
#     set -g mode-mouse on \;\
#     set -g mouse-resize-pane on \;\
#     set -g mouse-select-pane on \;\
#     set -g mouse-select-window on \;\
#     run tmux-zoom-in.sh \;
#     display 'Mouse: ON'
#
# # set mouse OFF with prefix M
# bind M \
#     set -g mode-mouse off \;\
#     set -g mouse-resize-pane off \;\
#     set -g mouse-select-pane off \;\
#     set -g mouse-select-window off \;\
#     run tmux-zoom-out.sh \;\
#     display 'Mouse: OFF'

# Just use <prefix> z
# unbind +
bind + run tmux-zoom-in.sh
# unbind -
bind - run tmux-zoom-out.sh
# bind - last-window \; swap-pane -s tmux-zoom.0 \; kill-window -t tmux-zoom

# Window options
setw -g monitor-activity on
set -g visual-activity on

# Key bindings
# bind and bind-key are synonymous

# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

bind-key s split-window -h # Split into a left and right
bind-key v split-window -v # Split into top and bottom (nmenonic: points down)

# Resize a line at a time without pressing prefix
bind-key -n M-S-Down resize-pane -D
bind-key -n M-S-Up resize-pane -U
bind-key -n M-S-Left resize-pane -L
bind-key -n M-S-Right resize-pane -R

# # Use Alt-arrow keys without prefix key to switch panes
# bind -n M-Left select-pane -L
# bind -n M-Right select-pane -R
# bind -n M-Up select-pane -U
# bind -n M-Down select-pane -D

# bind-key J resize-pane -D 20
# bind-key K resize-pane -U 20
# bind-key H resize-pane -L 20
# bind-key L resize-pane -R 20

# Pass through more common keys
unbind-key -n M-h
unbind-key -n M-j
unbind-key -n M-k
unbind-key -n M-l

# Switch panes: Use Alt + Shift + <vim key> without prefix
bind -n M-S-h select-pane -L
bind -n M-S-j select-pane -D
bind -n M-S-k select-pane -U
bind -n M-S-l select-pane -R

# Switch panes: Same again with prefix and lowercase
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# No delay for escape key press
# Default 500 is too long. Also (http://superuser.com/a/252717/65504)
set -sg escape-time 10 # Some say 10 is better, some say 0

# Next few are from: https://github.com/tmux-plugins/tmux-sensible
# emacs key bindings in tmux command prompt (prefix + :) are better than
# vi keys, even for vim users
set -g status-keys emacs # vi | emacs

# focus events enabled for terminals that support them
set -g focus-events on

# super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

# Reload tmux config (not a reset, cumulative only)
bind R source-file ~/.config/tmux/tmux.conf \; display "tmux.conf reloaded"

#
# Plugin settings
#

# tmux-yank
set -g @shell_mode 'vi' # if "set editing-mode vi"
#
# Readline bindings:
# prefix + y - copies text from the command line to clipboard.
# prefix + Y (shift-y) - copy pane current working directory to clipboard
#
# copy mode bindings:
# y - copy selection to system clipboard
# Y (shift-y) - "put" selection - equivalent to copying a selection, and pasting it to the command line

# tmux-open
# Usage: highlight a URL or filename and press 'o' to open it
# Ctrl-o to open it in $EDITOR

# tmux-copycat
# Usage:
# prefix + /       -  regex search (strings work too)
# prefix + ctrl-f  -  simple file search
# prefix + ctrl-g  -  jumping over git status files (best used after git status command)
# prefix + alt-h   -  jumping over SHA-1 hashes (best used after git log command)
# prefix + ctrl-u  -  url search (http, ftp and git urls)
# prefix + ctrl-d  -  number search (mnemonic d, as digit)
# prefix + alt-i   -  ip address search
# These start "copycat mode" and jump to first match.
#
# "Copycat mode" bindings
# n - jumps to the next match
# N - jumps to the previous match
#
# To copy a highlighted match:
# Enter - if you're using Tmux vi mode
# ctrl-w or alt-w - if you're using Tmux emacs mode
#
# Paste with prefix + ] (this is Tmux default paste).

#
# Plugins (using https://github.com/tmux-plugins/tpm )
#

set-environment -g TMUX_PLUGIN_MANAGER_PATH "$XDG_DATA_HOME/tmux/plugins/"

# prefix + I - Installs new plugins listed below and refreshes TMUX environment
# prefix + U - Updates plugin(s)
# prefix + alt + u - remove/uninstall plugins not on the plugin list

# List of plugins
# Must use alternate syntax given non-standard tmux.conf location:
# https://github.com/tmux-plugins/tpm/issues/57
set -g @tpm_plugins '\
  tmux-plugins/tmux-sensible \
  tmux-plugins/tmux-yank \
  tmux-plugins/tmux-open \
  tmux-plugins/tmux-copycat \
  roy2220/easyjump.tmux \
  laktak/extrakto \
'
# https://github.com/tmux-plugins/tmux-sensible
# https://github.com/tmux-plugins/tmux-yank
# https://github.com/tmux-plugins/tmux-open
# https://github.com/tmux-plugins/tmux-copycat
# https://github.com/roy2220/easyjump.tmux
# https://github.com/laktak/extrakto

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# # clone tpm if it doesn't exist
# if "test ! -d ~/.tmux/plugins/tpm" \
#    "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"
#
# # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run '~/.tmux/plugins/tpm/tpm'

# clone tpm if it doesn't exist
if '[ ! -d "$XDG_DATA_HOME"/tmux/plugins/tpm ]' \
   "run 'git clone --verbose --depth=10 https://github.com/tmux-plugins/tpm \"$XDG_DATA_HOME\"/tmux/plugins/tpm \
    && \"$XDG_DATA_HOME\"/tmux/plugins/tpm/bin/install_plugins'"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '"$XDG_DATA_HOME"/tmux/plugins/tpm/tpm'

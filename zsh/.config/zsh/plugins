#!/bin/bash
#      ^----- get shellcheck hints based on bash
# https://github.com/koalaman/shellcheck/issues/809
#
# shellcheck disable=SC1090 # sourced files with variables


# Zinit
# Wiki:    https://zdharma-continuum.github.io/zinit/wiki/
# Github:  https://github.com/zdharma-continuum/zinit
#
# Debug:   https://github.com/zdharma-continuum/zinit#tracking-of-the-active-session

# Source Zinit
# shellcheck disable=SC1072,1073  # https://github.com/koalaman/shellcheck/issues/1931
_source_zinit() {  # Discarded function for local variables
  zinit=$XDG_DATA_HOME/zinit/bin/zinit.zsh
  if [ ! -r "$zinit" ]; then
    zinit_bin=${zinit%/*}
    echo Cloning Zinit...
    # shellcheck disable=SC2174  # When used with -p, -m only applies to the deepest directory.
    mkdir -pm 700 "$zinit_bin"
    git clone --depth 1 https://github.com/zdharma-continuum/zinit.git "$zinit_bin"
  fi
  zinit_home=${zinit%/*/*}  # Set zinit home to be parent of zinit bin dir
  typeset -gA ZINIT  # Global associative array
  ZINIT[HOME_DIR]=${zinit_home}
  source "$zinit"
}
autoload -Uz _zinit
_source_zinit && unfunction _source_zinit
# shellcheck disable=SC2154,2034,2004
(( ${+_comps} )) && _comps[zinit]=_zinit

# # Use null plugin to run commands asynchronously. Work-around for https://web.archive.org/web/20201008014818/https://github.com/zdharma/zinit/issues/68
# # Faster and non-interactive version of `zinit create null`
# _null_plug_dir=${ZINIT[PLUGINS_DIR]}/_local---null
# # echo _null_plug_dir=$_null_plug_dir >&2
# if [[ ! -d $_null_plug_dir ]]; then
#   echo "Creating zinit 'null' plugin directory at: $_null_plug_dir"
#   mkdir -p -- "$_null_plug_dir"
# fi
# unset _null_plug_dir


# Run these commands asynchronously via null plugin
__zinit_deferred () {
  # Load pip completions if pip installed
  # Alternatively, as suggested in https://web.archive.org/web/20201008014818/https://github.com/zdharma/zinit/issues/68#issuecomment-410531439
  # shellcheck disable=2154  # $commands not assigned
  [[ ${commands[pip]} ]] && eval "$(pip completion --zsh)"

  # Source fzf files
  # Needs to be sourced after zsh-vim-mode to have ^R work
  if [[ ${commands[fzf]} ]]; then  # fzf is installed
    _source_file /usr/share/fzf/key-bindings.zsh
    _source_file /usr/share/fzf/completion.zsh
  fi
  # Setup my aliases after any turbo-loaded plugins
  _source_file "$XDG_CONFIG_HOME/bash/aliases"
  # echo finished running deferred function
}


# Friendly bindings for ZSH's vi mode
# https://github.com/softmoth/zsh-vim-mode
MODE_CURSOR_VICMD="green block"
MODE_CURSOR_VIINS="#20d08a blinking bar"
MODE_CURSOR_SEARCH="#ff00ff steady underline"
# How to manage bindkeys in plugins - eg withold the ^R binding
# https://web.archive.org/web/20201008014818/https://github.com/zdharma/zinit/issues/69
zinit ice wait depth"1" trackbinds bindmap'^R -> hold'  # ^R conflicts with fzf
zinit light 'softmoth/zsh-vim-mode'


# Additional completion definitions for Zsh
# https://github.com/zsh-users/zsh-completions
zinit ice wait blockf depth"1"  # have zinit manage completions  # https://github.com/zdharma-continuum/zinit#completions
zinit light 'zsh-users/zsh-completions'


# Add zsh's missing hooks, and support for user-defined hooks
# eg zle-line-init of the Special Wigets in `man zshzle`
# https://github.com/zsh-hooks/zsh-hooks'
# No 'wait' ice as it's used immediately in keyboard setup
zinit ice depth"1" # pick"zsh-hooks.plugin.zsh"
zinit light 'zsh-hooks/zsh-hooks'


# Print zsh's hooks
# https://github.com/agkozak/zhooks
zinit ice wait depth"1"
zinit light 'agkozak/zhooks'


# Bracketed Paste mode (uses zsh-hooks)
# My PR: https://github.com/robbyrussell/oh-my-zsh/pull/7887
zinit ice wait depth"1"
# zinit snippet OMZ::plugins/safe-paste/safe-paste.plugin.zsh
zinit snippet 'https://github.com/HaleTom/oh-my-zsh/blob/bracketed-paste/plugins/safe-paste/safe-paste.plugin.zsh'
# source /home/ravi/code/oh-my-zsh/plugins/safe-paste/safe-paste.plugin.zsh ####


# Auto-close and delete matching delimiters in zsh
# https://github.com/hlissner/zsh-autopair
zinit ice wait depth"1"
zinit light hlissner/zsh-autopair
unset 'AUTOPAIR_PAIRS[ ]'  # Make typing '[ x ]' consume the auto-inserted ']' and be compatible with Midnight Commander


# Auto suggestions
# https://github.com/zsh-users/zsh-autosuggestions
zinit ice wait depth"1" lucid atload'_zsh_autosuggest_start'
zinit light zsh-users/zsh-autosuggestions
ZSH_AUTOSUGGEST_STRATEGY=match_prev_cmd  # Match on previous history command also
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20  # Recommended
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=238'
ZSH_AUTOSUGGEST_USE_ASYNC=1


# Disabled due to:
# https://github.com/b4b4r07/enhancd/issues/77 hangs on automounts.  Workaround exists in issue.
# https://github.com/b4b4r07/enhancd/issues/85 (has workaround)
# # enhancd: A next-generation cd command with an interactive filter
# # https://github.com/b4b4r07/enhancd
# zinit ice wait depth"1"
# zinit light 'b4b4r07/enhancd'
# export ENHANCD_DIR=$XDG_CONFIG_HOME/enhancd ENHANCD_DOT_SHOW_FULLPATH=1 # ENHANCD_FILTER=fzy:fzf:peco:percol

# SmartCd
# https://github.com/CodesOfRishi/smartcd
if [[ ! $OSTYPE == darwin* ]]; then
  # TODO raise issue:
  # whereis: illegal option -- b
  # usage: whereis program [...]
  # Can't use SmartCd: fzf not found !
  SMARTCD_HIST_OPT='--'
  zinit ice wait depth"1"
  zinit light 'CodesOfRishi/smartcd'
fi

# z: jump around based on frecency
# https://github.com/agkozak/zsh-z
ZSHZ_DATA=$XDG_DATA_HOME/zsh-z/database
ZSHZ_TILDE=1
ZSHZ_TRAILING_SLASH=1
ZSHZ_UNCOMMON=1
zinit ice wait depth"1" blockf
zinit light 'agkozak/zsh-z'


# Reminds you to use existing aliases for commands you just typed
# https://github.com/MichaelAquilina/zsh-you-should-use
# zinit ice wait'0' load'[[ ! -v ps1 ]]' unload'[[ -v ps1 ]]'  # Doesn't work
zinit ice wait depth"1"
zinit load 'MichaelAquilina/zsh-you-should-use'


# Emoji completion on the command line
# https://github.com/b4b4r07/emoji-cli
# If ever emoji.js needs to be updated:  https://github.com/b4b4r07/emoji-cli/issues/15
EMOJI_CLI_KEYBIND='^o'  # Default is ^S
EMOJI_CLI_USE_EMOJI=1   # Insert the emoji itself, not the :explanation:
EMOJI_CLI_FILTER='fzf-tmux -d 30%:fzf:peco:percol'  # fzf --min-height default is 10
zinit ice wait depth"1"
zinit light 'b4b4r07/emoji-cli'


# A collection of LS_COLORS definitions; needs your contribution!
# https://github.com/trapd00r/LS_COLORS
# https://zdharma-continuum.github.io/zinit/wiki/LS_COLORS-explanation/
# shellcheck disable=2016 # Expressions don't expand in single quotes, use double quotes for that.
zinit ice wait depth"1" atclone"dircolors -b LS_COLORS > clrs.zsh" \
    atpull'%atclone' pick"clrs.zsh" nocompile'!' \
    atload'zstyle ":completion:*" list-colors “${(s.:.)LS_COLORS}”'
zinit light trapd00r/LS_COLORS


# k is the new l, yo
# https://github.com/supercrabtree/k
# zinit ice wait'[[ -n ${ZLAST_COMMANDS[(r)k*]} ]]' pick'k.sh'
zinit ice wait depth"1" pick'k.sh'
zinit light supercrabtree/k


# zsh-defer - allow running commands after shell loads
# https://github.com/romkatv/zsh-defer
# No "wait" ice as it's used immediately below
zinit ice depth"1"
zinit light romkatv/zsh-defer


# Adds numbered shortcuts to the output git status, and much more
# https://madebynathan.com/2011/10/19/git-shortcuts-like-youve-never-seen-before/
# https://github.com/scmbreeze/scm_breeze
# Historical note, 2020-09-02: adding 'wait' causes 10 second hang after prompt printed
# zinit ice wait depth"1"
# zinit light 'scmbreeze/scm_breeze'
zsh-defer -12 zinit light 'scmbreeze/scm_breeze'

# Run some commands asynchronously for faster startup
zsh-defer -12 __zinit_deferred  # -12 enables STDOUT, STDERR output


# Syntax highlighting should be the last plugin
# Optimized and extended zsh-syntax-highlighting
# https://github.com/zdharma-continuum/fast-syntax-highlighting
FAST_THEME_NAME=free  # From `fast-theme -l`. `fast-theme -t <theme>` to test
zinit ice wait depth"1" atinit'zicompinit; zicdreplay'
zinit ice atload"[[ current_theme.zsh -nt themes/$FAST_THEME_NAME.ini ]] || fast-theme $FAST_THEME_NAME > /dev/null"
zinit load 'zdharma-continuum/fast-syntax-highlighting'
typeset -gA FAST_HIGHLIGHT_STYLES FAST_HIGHLIGHT
# Customise colours of theme set via fast-theme  https://github.com/zdharma/fast-syntax-highlighting/issues/42
# Available options in $XDG_CONFIG_HOME/zsh/.zinit/plugins/zdharma---fast-syntax-highlighting/current_theme.zsh
FAST_HIGHLIGHT[use_brackets]=1
FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}unknown-token]="fg=196"  # bright red
FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}alias]='fg=177'  # lavender
FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}reserved-word]='fg=214'  # orange
FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}suffix-alias]='fg=cyan'  # cyan
FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}builtin]='fg=148'  # leaf green
FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}function]='fg=117'  # cyan
FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}command]='fg=180'  # grey tinged brown
FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}precommand]='fg=255'  # white
FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}assign]='fg=219'  # pink
FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}paired-bracket]='bg:green'
FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}bracket-level-1]='fg=green,bold'
FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}bracket-level-2]='fg=yellow,bold'
FAST_HIGHLIGHT_STYLES[${FAST_THEME_NAME}bracket-level-3]='fg=red,bold'
# TODO:
# : ${FAST_HIGHLIGHT_STYLES[freepath]:=fg=166}
# : ${FAST_HIGHLIGHT_STYLES[freepath_pathseparator]:=}
# : ${FAST_HIGHLIGHT_STYLES[freeglobbing]:=fg=112}
# : ${FAST_HIGHLIGHT_STYLES[freehistory-expansion]:=fg=blue,bold}
# : ${FAST_HIGHLIGHT_STYLES[freesingle-hyphen-option]:=fg=110}
# : ${FAST_HIGHLIGHT_STYLES[freedouble-hyphen-option]:=fg=110}
# : ${FAST_HIGHLIGHT_STYLES[freeback-quoted-argument]:=none}
# : ${FAST_HIGHLIGHT_STYLES[freesingle-quoted-argument]:=fg=150}
# : ${FAST_HIGHLIGHT_STYLES[freedouble-quoted-argument]:=fg=150}
# : ${FAST_HIGHLIGHT_STYLES[freedollar-quoted-argument]:=fg=150}
# : ${FAST_HIGHLIGHT_STYLES[freeback-or-dollar-double-quoted-argument]:=fg=110}
# : ${FAST_HIGHLIGHT_STYLES[freeback-dollar-quoted-argument]:=fg=110}

# Syntax highlighting should be the last plugin loaded
return


##
## Null code and comments only beyond here
##

# # zsh syntax highlighting
# # https://github.com/zsh-users/zsh-syntax-highlighting
# # Must be at end, after any widgets, any 'zle -N', and compinit
# zinit light 'zsh-users/zsh-syntax-highlighting'
# ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern regexp root)
# typeset -A ZSH_HIGHLIGHT_STYLES
# ZSH_HIGHLIGHT_STYLES[alias]='fg=magenta,bold'
# ZSH_HIGHLIGHT_STYLES[arg0]='fg=blue'
# ZSH_HIGHLIGHT_STYLES[suffix-alias]='fg=blue,underline'
# ZSH_HIGHLIGHT_STYLES[precommand]='fg=green'
# ZSH_HIGHLIGHT_STYLES[path]='fg=cyan'
# ZSH_HIGHLIGHT_STYLES[root]='bg=red'
# ZSH_HIGHLIGHT_STYLES[bracket-level-1]='fg=green,bold'
# ZSH_HIGHLIGHT_STYLES[bracket-level-2]='fg=yellow,bold'
# ZSH_HIGHLIGHT_STYLES[bracket-level-3]='fg=red,bold'
# ZSH_HIGHLIGHT_STYLES[bracket-level-4]='fg=magenta,bold'
# # These aren't working
# ZSH_HIGHLIGHT_PATTERNS+=('foo' 'fg=white,bold,bg=red')
# ZSH_HIGHLIGHT_REGEXP+=('\bsudo\b' 'fg=white,bold,bg=red')
# # fg=, bg=, bold, standout, underline none, black, red, green, yellow, blue, magenta, cyan and white

# For shell-check to see variables used
# shellcheck disable=SC2128  # Arrays without indexing
cat <<END > /dev/null
$ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE $ZSH_AUTOSUGGEST_USE_ASYNC
$ZSH_AUTOSUGGEST_STRATEGY $ZSH_HIGHLIGHT_HIGHLIGHTERS $ZSH_HIGHLIGHT_STYLES
$ZSH_HIGHLIGHT_PATTERNS $ZSH_HIGHLIGHT_REGEXP $ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE
$FAST_HIGHLIGHT_STYLES $MODE_CURSOR_VICMD $MODE_CURSOR_VIINS
$MODE_CURSOR_SEARCH $ENHANCD_DIR $ENHANCD_FILTER $ENHANCD_DOT_SHOW_FULLPATH
$FAST_HIGHLIGHT $ZINIT $EMOJI_CLI_KEYBIND $EMOJI_CLI_USE_EMOJI $EMOJI_CLI_FILTER
$ZSHZ_DATA $ZSHZ_TILDE $ZSHZ_TRAILING_SLASH $ZSHZ_UNCOMMON $SMARTCD_HIST_OPT
END
